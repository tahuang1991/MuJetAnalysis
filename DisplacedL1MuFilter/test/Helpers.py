import array
from ROOT import *
from cuts import *
import math
import array
from math import log10, floor
from logic import *
import numpy as np
import os

ptbin = [
    2.0,   2.5,   3.0,   3.5,   4.0,   4.5,   5.0,   6.0,   7.0,   8.0,  
    10.0,  12.0,  14.0,  16.0,  18.0,  20.0,  25.0,  30.0,  35.0,  40.0,  
    45.0,  50.0,  60.0,  70.0,  80.0,  90.0, 100.0, 120.0, 140.0, 200.0]
myptbin = np.asarray(ptbin)
nmyptbin = len(myptbin) - 1



etabin = [
    0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 
    1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9,
    2.0, 2.1, 2.2, 2.3, 2.4, 2.5]
myetabin = np.asarray(etabin)

#______________________________________________________________________________                                           
M_PI = 4*math.atan(1)


def fitStraightLine(v, w, debug=False):
    alpha = 0
    beta = 0

    if len(v)<2: return alpha, beta,-1,0

    if v[0] < v[-1]:
        zmin = v[0]
        zmax = v[-1]
    else:
        zmin = v[-1]
        zmax = v[0]
    
    fit1 = TF1("fit1","pol1",zmin,zmax) 
    gr = TGraph(len(v),array.array("f",v), array.array("f",w));
    gr.Fit(fit1,"RQ")
    
    alpha = fit1.GetParameter(0)#; //value of 0th parameter
    beta  = fit1.GetParameter(1)#; //value of 1st parameter
    chi2 = fit1.GetChisquare()
    ndf = fit1.GetNDF()

    #print "\tfit params",alpha, beta, chi2, ndf
    return alpha, beta, chi2, ndf

def getFittedPositions(xs, zs):
    
    st_input = []
    xs_input = []
    zs_input = []
    ## get the real stub positions
    #print xs
    #print ys
    #print zs
    #print 
    if xs[0]!=99 and zs[0]!=99:
        st_input.append(1)
        xs_input.append(xs[0])
        zs_input.append(zs[0])

    if xs[1]!=99 and zs[1]!=99:
        st_input.append(2)
        xs_input.append(xs[1])
        zs_input.append(zs[1])

    if xs[2]!=99 and zs[2]!=99:
        st_input.append(3)
        xs_input.append(xs[2])
        zs_input.append(zs[2])

    if xs[3]!=99 and zs[3]!=99:
        st_input.append(4)
        xs_input.append(xs[3])
        zs_input.append(zs[3])

    #print st_input
    #print xs_input
    #print ys_input
    #print zs_input
        
    x_results = fitStraightLine(zs_input, xs_input)

    #print x_results
    #print y_results

    alpha_x, beta_x, chi2_x, ndf_x = x_results[0], x_results[1], x_results[1], x_results[3]

    #print alpha_x, beta_x, chi2_x, ndf_x
    #print alpha_y, beta_y, chi2_y, ndf_y

    if ndf_x!=0:
        chi2ndf_x = chi2_x/ndf_x
    else:
        chi2ndf_x = chi2_x

    xs_output = []

    #print len(zs_input)
    for i in range(0,len(zs_input)):
        #print i, zs_input[i]
        xs_output.append(alpha_x + beta_x * zs_input[i])
        
    return xs_output, st_input, chi2ndf_x


def frange(end,start=0,inc=0,precision=1):
    """A range function that accepts float increments."""
    import math

    if not start:
        start = end + 0.0
        end = 0.0
    else: end += 0.0

    if not inc:
        inc = 1.0
    count = int(math.ceil((start - end) / inc))

    L = [None] * count

    L[0] = end
    for i in (xrange(1,count)):
        L[i] = L[i-1] + inc
    return L



#______________________________________________________________________________                        
def getBestValue(value1, value2):
    if abs(value1) != 99.: return value1
    else:                  return value2


                   
#______________________________________________________________________________                        
def getRadius(padSize, eta, doFit):
    radius_dict = {}
    radius_dict['pad1_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad2_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad4_eta12to14_withoutLCTFit'] = 0
    radius_dict['pad8_eta12to14_withoutLCTFit'] = 0

    radius_dict['pad1_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad2_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad4_eta14to16_withoutLCTFit'] = 0
    radius_dict['pad8_eta14to16_withoutLCTFit'] = 0

    radius_dict['pad1_eta16to18_withoutLCTFit'] = 2.5
    radius_dict['pad2_eta16to18_withoutLCTFit'] = 2.6
    radius_dict['pad4_eta16to18_withoutLCTFit'] = 2.7
    radius_dict['pad8_eta16to18_withoutLCTFit'] = 3.4

    radius_dict['pad1_eta18to20_withoutLCTFit'] = 2.3
    radius_dict['pad2_eta18to20_withoutLCTFit'] = 2.4
    radius_dict['pad4_eta18to20_withoutLCTFit'] = 2.6
    radius_dict['pad8_eta18to20_withoutLCTFit'] = 3.0

    radius_dict['pad1_eta20to22_withoutLCTFit'] = 2.2
    radius_dict['pad2_eta20to22_withoutLCTFit'] = 2.3
    radius_dict['pad4_eta20to22_withoutLCTFit'] = 2.5
    radius_dict['pad8_eta20to22_withoutLCTFit'] = 3.1


    radius_dict['pad1_eta12to14_withLCTFit'] = 0
    radius_dict['pad2_eta12to14_withLCTFit'] = 0
    radius_dict['pad4_eta12to14_withLCTFit'] = 0
    radius_dict['pad8_eta12to14_withLCTFit'] = 0

    radius_dict['pad1_eta14to16_withLCTFit'] = 0
    radius_dict['pad2_eta14to16_withLCTFit'] = 0
    radius_dict['pad4_eta14to16_withLCTFit'] = 0
    radius_dict['pad8_eta14to16_withLCTFit'] = 0

    radius_dict['pad1_eta16to18_withLCTFit'] = 2.1
    radius_dict['pad2_eta16to18_withLCTFit'] = 2.0
    radius_dict['pad4_eta16to18_withLCTFit'] = 2.2
    radius_dict['pad8_eta16to18_withLCTFit'] = 3.0

    radius_dict['pad1_eta18to20_withLCTFit'] = 2.2
    radius_dict['pad2_eta18to20_withLCTFit'] = 2.2
    radius_dict['pad4_eta18to20_withLCTFit'] = 2.4
    radius_dict['pad8_eta18to20_withLCTFit'] = 3.1

    radius_dict['pad1_eta20to22_withLCTFit'] = 2.1
    radius_dict['pad2_eta20to22_withLCTFit'] = 2.2
    radius_dict['pad4_eta20to22_withLCTFit'] = 2.3
    radius_dict['pad8_eta20to22_withLCTFit'] = 3.0

    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'

    return radius_dict[padSize + '_eta' + eta + fitString]

#______________________________________________________________________________                        
def passEllipseCut(DDY123, delta_phi_dir,
                   padSize, eta, doFit):
    radius = getRadius(padSize, eta, doFit)
    scaleFactor = 50
    x2value = DDY123 * DDY123
    yvalue = scaleFactor * delta_phi_dir
    y2value = yvalue * yvalue
    
    return  x2value + y2value <= radius*radius

#______________________________________________________________________________                        
def pt_from_DDY123(DDY123, eta, parity, doFit):
    
    DDY123_dict = {}

    DDY123_dict['eta12to14_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0]
    DDY123_dict['eta12to14_oee_withoutLCTFit_y'] =  [12.18, 18.2, 10.760000000000002, 9.14, 8.83, 8.66, 5.08, 9.1, 5.54, 3.4400000000000004, 4.660000000000001, 2.8200000000000003, 1.6800000000000002, 1.3600000000000003, 2.3800000000000003, 3.1, 1.1600000000000001]

    DDY123_dict['eta12to14_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0]
    DDY123_dict['eta12to14_oee_withLCTFit_y'] =  [12.18, 18.2, 10.760000000000002, 9.14, 8.83, 8.66, 5.08, 9.1, 5.54, 3.4400000000000004, 4.660000000000001, 2.8200000000000003, 1.6800000000000002, 1.3600000000000003, 2.3800000000000003, 3.1, 1.1600000000000001]



    DDY123_dict['eta14to16_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 41.0, 43.0]
    DDY123_dict['eta14to16_oee_withoutLCTFit_y'] =  [14.08, 9.02, 10.280000000000001, 6.11, 6.24, 6.860000000000001, 5.78, 7.840000000000001, 5.680000000000001, 4.800000000000001, 2.4600000000000004, 1.7200000000000002, 12.360000000000001, 1.96, 1.7600000000000002, 1.78, 0.18000000000000002, 2.7800000000000002, 0.9800000000000001]

    DDY123_dict['eta14to16_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 41.0, 43.0]
    DDY123_dict['eta14to16_oee_withLCTFit_y'] =  [14.08, 9.02, 10.280000000000001, 6.11, 6.24, 6.860000000000001, 5.78, 7.840000000000001, 5.680000000000001, 4.800000000000001, 2.4600000000000004, 1.7200000000000002, 12.360000000000001, 1.96, 1.7600000000000002, 1.78, 0.18000000000000002, 2.7800000000000002, 0.9800000000000001]




    DDY123_dict['eta16to18_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 49.0, 53.0]
    DDY123_dict['eta16to18_oee_withoutLCTFit_y'] =  [17.580000000000002, 14.920000000000002, 13.38, 11.5, 7.950000000000001, 7.260000000000001, 8.260000000000002, 7.5200000000000005, 7.28, 4.860000000000001, 5.14, 3.9800000000000004, 5.640000000000001, 3.8800000000000003, 2.7, 2.12, 4.12, 1.56, 0.7800000000000001, 1.18, 19.8, 1.58]


    DDY123_dict['eta16to18_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 49.0, 53.0]
    DDY123_dict['eta16to18_oee_withLCTFit_y'] =  [17.580000000000002, 14.920000000000002, 13.38, 11.5, 7.950000000000001, 7.260000000000001, 8.260000000000002, 7.5200000000000005, 7.28, 4.860000000000001, 5.14, 3.9800000000000004, 5.640000000000001, 3.8800000000000003, 2.7, 2.12, 4.12, 1.56, 0.7800000000000001, 1.18, 19.8, 1.58]





    DDY123_dict['eta18to20_oee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0]
    DDY123_dict['eta18to20_oee_withoutLCTFit_y'] =  [19.8, 16.36, 11.3, 9.5, 7.9700000000000015, 6.48, 6.42, 7.5600000000000005, 4.966666666666668, 4.910000000000001, 4.38, 3.6800000000000006, 4.900000000000001, 3.16, 2.8800000000000003, 3.62, 2.3400000000000003, 1.9200000000000002, 6.660000000000001, 1.9000000000000001, 0.7400000000000001, 0.9400000000000001, 7.28, 1.12, 1.58, 0.18000000000000002]




    DDY123_dict['eta18to20_oee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0]
    DDY123_dict['eta18to20_oee_withLCTFit_y'] =  [19.8, 16.36, 11.3, 9.5, 7.9700000000000015, 6.48, 6.42, 7.5600000000000005, 4.966666666666668, 4.910000000000001, 4.38, 3.6800000000000006, 4.900000000000001, 3.16, 2.8800000000000003, 3.62, 2.3400000000000003, 1.9200000000000002, 6.660000000000001, 1.9000000000000001, 0.7400000000000001, 0.9400000000000001, 7.28, 1.12, 1.58, 0.18000000000000002]




    DDY123_dict['eta20to22_oee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0, 51.0, 55.0]
    DDY123_dict['eta20to22_oee_withoutLCTFit_y'] =  [10.680000000000001, 9.650000000000002, 6.4, 6.746666666666667, 5.7, 5.24, 4.16, 6.12, 2.726666666666667, 4.280000000000001, 3.500000000000001, 3.9400000000000004, 3.9400000000000004, 1.2000000000000002, 4.7, 3.74, 1.8, 1.82, 0.7000000000000001, 0.38, 0.18000000000000002, 1.3600000000000003, 16.16, 14.98]



    DDY123_dict['eta20to22_oee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0, 51.0, 55.0]
    DDY123_dict['eta20to22_oee_withLCTFit_y'] =  [10.680000000000001, 9.650000000000002, 6.4, 6.746666666666667, 5.7, 5.24, 4.16, 6.12, 2.726666666666667, 4.280000000000001, 3.500000000000001, 3.9400000000000004, 3.9400000000000004, 1.2000000000000002, 4.7, 3.74, 1.8, 1.82, 0.7000000000000001, 0.38, 0.18000000000000002, 1.3600000000000003, 16.16, 14.98]







    DDY123_dict['eta22to24_oee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 53.0]
    DDY123_dict['eta22to24_oee_withoutLCTFit_y'] =  [19.8, 6.460000000000001, 5.12, 4.24, 4.760000000000001, 5.300000000000001, 5.5200000000000005, 2.9500000000000006, 4.290000000000001, 4.0, 4.180000000000001, 2.986666666666667, 2.8200000000000003, 0.97, 2.15, 5.6000000000000005, 2.0, 1.5000000000000002, 0.56, 1.78, 0.92, 0.18000000000000002, 0.38, 0.18000000000000002]



    DDY123_dict['eta22to24_oee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 53.0]
    DDY123_dict['eta22to24_oee_withLCTFit_y'] =  [19.8, 6.460000000000001, 5.12, 4.24, 4.760000000000001, 5.300000000000001, 5.5200000000000005, 2.9500000000000006, 4.290000000000001, 4.0, 4.180000000000001, 2.986666666666667, 2.8200000000000003, 0.97, 2.15, 5.6000000000000005, 2.0, 1.5000000000000002, 0.56, 1.78, 0.92, 0.18000000000000002, 0.38, 0.18000000000000002]



    DDY123_dict['eta12to14_ooo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0]
    DDY123_dict['eta12to14_ooo_withoutLCTFit_y'] =  [17.3, 10.540000000000001, 8.564, 7.726666666666668, 5.98, 5.45, 5.105, 4.356, 4.160000000000001, 4.1, 3.3000000000000003, 3.8000000000000003, 2.97, 2.4100000000000006, 3.460000000000001, 3.2, 2.12, 2.9000000000000004, 1.1733333333333333, 1.62, 1.3200000000000003, 8.719999999999999, 0.9800000000000001, 10.98, 1.3400000000000003, 1.56, 0.18000000000000002]

    DDY123_dict['eta12to14_ooo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0]
    DDY123_dict['eta12to14_ooo_withLCTFit_y'] =  [17.3, 10.540000000000001, 8.564, 7.726666666666668, 5.98, 5.45, 5.105, 4.356, 4.160000000000001, 4.1, 3.3000000000000003, 3.8000000000000003, 2.97, 2.4100000000000006, 3.460000000000001, 3.2, 2.12, 2.9000000000000004, 1.1733333333333333, 1.62, 1.3200000000000003, 8.719999999999999, 0.9800000000000001, 10.98, 1.3400000000000003, 1.56, 0.18000000000000002]



    DDY123_dict['eta14to16_ooo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0]
    DDY123_dict['eta14to16_ooo_withoutLCTFit_y'] =  [17.78, 13.660000000000002, 10.153333333333334, 7.920000000000001, 6.06, 5.14, 5.4, 5.0, 3.8480000000000003, 3.9600000000000004, 3.4800000000000004, 4.16, 4.12, 3.3400000000000007, 2.5100000000000007, 1.5500000000000003, 2.480000000000001, 2.586666666666667, 1.9800000000000002, 2.02, 2.22, 1.06, 1.5500000000000003, 0.7200000000000001, 0.9800000000000001, 0.9800000000000001]

    DDY123_dict['eta14to16_ooo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0]
    DDY123_dict['eta14to16_ooo_withLCTFit_y'] =  [17.78, 13.660000000000002, 10.153333333333334, 7.920000000000001, 6.06, 5.14, 5.4, 5.0, 3.8480000000000003, 3.9600000000000004, 3.4800000000000004, 4.16, 4.12, 3.3400000000000007, 2.5100000000000007, 1.5500000000000003, 2.480000000000001, 2.586666666666667, 1.9800000000000002, 2.02, 2.22, 1.06, 1.5500000000000003, 0.7200000000000001, 0.9800000000000001, 0.9800000000000001]







    DDY123_dict['eta16to18_ooo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta16to18_ooo_withoutLCTFit_y'] =  [19.8, 13.32, 16.540000000000003, 12.340000000000002, 11.22, 11.780000000000001, 10.120000000000001, 10.240000000000002, 5.44, 7.680000000000001, 8.43, 8.260000000000002, 7.1, 8.0, 4.760000000000001, 7.24, 6.38, 3.04, 1.56, 1.5400000000000003, 16.92, 18.580000000000002, 1.58, 0.9800000000000001]



    DDY123_dict['eta16to18_ooo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta16to18_ooo_withLCTFit_y'] =  [19.8, 13.32, 16.540000000000003, 12.340000000000002, 11.22, 11.780000000000001, 10.120000000000001, 10.240000000000002, 5.44, 7.680000000000001, 8.43, 8.260000000000002, 7.1, 8.0, 4.760000000000001, 7.24, 6.38, 3.04, 1.56, 1.5400000000000003, 16.92, 18.580000000000002, 1.58, 0.9800000000000001]



    DDY123_dict['eta18to20_ooo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0, 57.0]
    DDY123_dict['eta18to20_ooo_withoutLCTFit_y'] =  [2.18, 19.02, 14.440000000000001, 13.280000000000001, 10.260000000000002, 11.3, 10.1, 9.98, 10.88, 7.5200000000000005, 5.860000000000001, 8.32, 7.28, 5.880000000000001, 4.460000000000001, 6.960000000000001, 3.3200000000000003, 5.620000000000001, 2.2, 1.57, 1.5200000000000002, 2.3200000000000003, 0.9600000000000001, 3.5600000000000005, 1.78, 1.56, 2.7800000000000002]



    DDY123_dict['eta18to20_ooo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 51.0, 53.0, 57.0]
    DDY123_dict['eta18to20_ooo_withLCTFit_y'] =  [2.18, 19.02, 14.440000000000001, 13.280000000000001, 10.260000000000002, 11.3, 10.1, 9.98, 10.88, 7.5200000000000005, 5.860000000000001, 8.32, 7.28, 5.880000000000001, 4.460000000000001, 6.960000000000001, 3.3200000000000003, 5.620000000000001, 2.2, 1.57, 1.5200000000000002, 2.3200000000000003, 0.9600000000000001, 3.5600000000000005, 1.78, 1.56, 2.7800000000000002]





    DDY123_dict['eta20to22_ooo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta20to22_ooo_withoutLCTFit_y'] =  [15.940000000000001, 16.0, 12.08, 7.98, 9.3, 9.780000000000001, 10.06, 9.750000000000002, 6.24, 5.800000000000001, 7.920000000000001, 7.300000000000001, 11.260000000000002, 8.16, 7.640000000000001, 4.28, 4.36, 5.260000000000001, 2.5400000000000005, 2.68, 3.08, 3.3000000000000003, 0.9600000000000001, 0.38, 1.98]

    DDY123_dict['eta20to22_ooo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta20to22_ooo_withLCTFit_y'] =  [15.940000000000001, 16.0, 12.08, 7.98, 9.3, 9.780000000000001, 10.06, 9.750000000000002, 6.24, 5.800000000000001, 7.920000000000001, 7.300000000000001, 11.260000000000002, 8.16, 7.640000000000001, 4.28, 4.36, 5.260000000000001, 2.5400000000000005, 2.68, 3.08, 3.3000000000000003, 0.9600000000000001, 0.38, 1.98]






    DDY123_dict['eta22to24_ooo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 59.0]
    DDY123_dict['eta22to24_ooo_withoutLCTFit_y'] =  [19.8, 8.440000000000001, 9.16, 10.910000000000002, 6.680000000000001, 7.3500000000000005, 8.06, 7.22, 6.08, 5.513333333333334, 8.64, 5.470000000000001, 2.9600000000000004, 4.640000000000001, 14.22, 11.04, 1.2800000000000002, 0.7800000000000001, 1.5000000000000002, 2.5600000000000005, 0.7400000000000001, 0.38, 0.5800000000000001, 1.7600000000000002, 1.18, 0.38, 1.3800000000000001]





    DDY123_dict['eta22to24_ooo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 59.0]
    DDY123_dict['eta22to24_ooo_withLCTFit_y'] =  [19.8, 8.440000000000001, 9.16, 10.910000000000002, 6.680000000000001, 7.3500000000000005, 8.06, 7.22, 6.08, 5.513333333333334, 8.64, 5.470000000000001, 2.9600000000000004, 4.640000000000001, 14.22, 11.04, 1.2800000000000002, 0.7800000000000001, 1.5000000000000002, 2.5600000000000005, 0.7400000000000001, 0.38, 0.5800000000000001, 1.7600000000000002, 1.18, 0.38, 1.3800000000000001]



    DDY123_dict['eta12to14_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_eee_withoutLCTFit_y'] =  [17.520000000000003, 15.81, 10.559999999999999, 6.895000000000001, 4.7700000000000005, 3.7600000000000002, 3.322222222222223, 3.0275000000000003, 2.4740000000000006, 2.2, 2.2600000000000002, 2.042857142857143, 2.0300000000000002, 1.7600000000000002, 1.746666666666667, 1.6, 1.3725000000000003, 1.4800000000000002, 1.4400000000000004, 1.3933333333333335, 6.0600000000000005, 2.1, 0.7000000000000001, 3.5000000000000004, 0.9800000000000001, 0.56, 0.18000000000000002, 1.7200000000000002]

    DDY123_dict['eta12to14_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 53.0, 55.0, 57.0]
    DDY123_dict['eta12to14_eee_withLCTFit_y'] =  [17.520000000000003, 15.81, 10.559999999999999, 6.895000000000001, 4.7700000000000005, 3.7600000000000002, 3.322222222222223, 3.0275000000000003, 2.4740000000000006, 2.2, 2.2600000000000002, 2.042857142857143, 2.0300000000000002, 1.7600000000000002, 1.746666666666667, 1.6, 1.3725000000000003, 1.4800000000000002, 1.4400000000000004, 1.3933333333333335, 6.0600000000000005, 2.1, 0.7000000000000001, 3.5000000000000004, 0.9800000000000001, 0.56, 0.18000000000000002, 1.7200000000000002]







    DDY123_dict['eta14to16_eee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 55.0, 59.0]
    DDY123_dict['eta14to16_eee_withoutLCTFit_y'] =  [0.9800000000000001, 16.62, 11.860000000000001, 8.280000000000001, 5.47, 4.366666666666667, 3.5700000000000007, 2.8000000000000003, 2.72, 2.471428571428572, 2.0933333333333337, 2.2600000000000002, 1.7000000000000004, 1.995, 1.4800000000000002, 1.5000000000000002, 1.3733333333333335, 1.9600000000000002, 1.2600000000000002, 4.620000000000001, 1.1600000000000001, 1.02, 0.88, 0.38, 0.18000000000000002, 0.18000000000000002, 0.56, 0.38]

    DDY123_dict['eta14to16_eee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0, 51.0, 55.0, 59.0]
    DDY123_dict['eta14to16_eee_withLCTFit_y'] =  [0.9800000000000001, 16.62, 11.860000000000001, 8.280000000000001, 5.47, 4.366666666666667, 3.5700000000000007, 2.8000000000000003, 2.72, 2.471428571428572, 2.0933333333333337, 2.2600000000000002, 1.7000000000000004, 1.995, 1.4800000000000002, 1.5000000000000002, 1.3733333333333335, 1.9600000000000002, 1.2600000000000002, 4.620000000000001, 1.1600000000000001, 1.02, 0.88, 0.38, 0.18000000000000002, 0.18000000000000002, 0.56, 0.38]





    DDY123_dict['eta16to18_eee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0]
    DDY123_dict['eta16to18_eee_withoutLCTFit_y'] =  [19.8, 15.750000000000002, 16.94, 12.520000000000001, 11.620000000000001, 8.97, 6.45, 10.42, 7.940000000000001, 8.4, 7.32, 6.12, 4.0, 8.15, 5.0200000000000005, 2.4600000000000004, 5.880000000000001, 10.8, 1.96, 3.1, 5.14, 1.9400000000000002, 9.14, 0.7800000000000001]

    DDY123_dict['eta16to18_eee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0]
    DDY123_dict['eta16to18_eee_withLCTFit_y'] =  [19.8, 15.750000000000002, 16.94, 12.520000000000001, 11.620000000000001, 8.97, 6.45, 10.42, 7.940000000000001, 8.4, 7.32, 6.12, 4.0, 8.15, 5.0200000000000005, 2.4600000000000004, 5.880000000000001, 10.8, 1.96, 3.1, 5.14, 1.9400000000000002, 9.14, 0.7800000000000001]



    DDY123_dict['eta18to20_eee_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 59.0]
    DDY123_dict['eta18to20_eee_withoutLCTFit_y'] =  [16.700000000000003, 13.780000000000001, 10.870000000000001, 9.23, 9.08, 7.640000000000001, 8.240000000000002, 5.555000000000001, 6.3, 5.480000000000001, 4.04, 4.740000000000001, 2.8800000000000003, 6.460000000000001, 5.44, 4.9, 3.3200000000000003, 4.44, 2.18, 12.620000000000001, 0.5800000000000001, 1.1600000000000001, 3.7800000000000002]

    DDY123_dict['eta18to20_eee_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 59.0]
    DDY123_dict['eta18to20_eee_withLCTFit_y'] =  [16.700000000000003, 13.780000000000001, 10.870000000000001, 9.23, 9.08, 7.640000000000001, 8.240000000000002, 5.555000000000001, 6.3, 5.480000000000001, 4.04, 4.740000000000001, 2.8800000000000003, 6.460000000000001, 5.44, 4.9, 3.3200000000000003, 4.44, 2.18, 12.620000000000001, 0.5800000000000001, 1.1600000000000001, 3.7800000000000002]



    DDY123_dict['eta20to22_eee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta20to22_eee_withoutLCTFit_y'] =  [2.3800000000000003, 10.740000000000002, 9.07, 8.96, 9.200000000000001, 8.17, 6.760000000000001, 7.380000000000001, 6.6000000000000005, 5.58, 4.58, 6.5200000000000005, 4.9, 3.4800000000000004, 3.64, 3.3400000000000003, 2.64, 7.260000000000001, 1.7200000000000002, 0.36000000000000004, 1.3600000000000003, 0.9800000000000001, 2.7, 0.9800000000000001]





    DDY123_dict['eta20to22_eee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 51.0]
    DDY123_dict['eta20to22_eee_withLCTFit_y'] =  [2.3800000000000003, 10.740000000000002, 9.07, 8.96, 9.200000000000001, 8.17, 6.760000000000001, 7.380000000000001, 6.6000000000000005, 5.58, 4.58, 6.5200000000000005, 4.9, 3.4800000000000004, 3.64, 3.3400000000000003, 2.64, 7.260000000000001, 1.7200000000000002, 0.36000000000000004, 1.3600000000000003, 0.9800000000000001, 2.7, 0.9800000000000001]



    DDY123_dict['eta22to24_eee_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eee_withoutLCTFit_y'] =  [9.360000000000001, 12.540000000000001, 6.19, 5.4, 7.540000000000001, 6.6000000000000005, 6.04, 5.620000000000001, 4.720000000000001, 6.24, 4.18, 2.2600000000000002, 4.460000000000001, 4.36, 2.66, 5.4, 1.4600000000000002, 1.7400000000000002, 2.9400000000000004, 3.9600000000000004, 1.18, 1.3800000000000001, 0.38]

    DDY123_dict['eta22to24_eee_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eee_withLCTFit_y'] =  [9.360000000000001, 12.540000000000001, 6.19, 5.4, 7.540000000000001, 6.6000000000000005, 6.04, 5.620000000000001, 4.720000000000001, 6.24, 4.18, 2.2600000000000002, 4.460000000000001, 4.36, 2.66, 5.4, 1.4600000000000002, 1.7400000000000002, 2.9400000000000004, 3.9600000000000004, 1.18, 1.3800000000000001, 0.38]



    DDY123_dict['eta12to14_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 29.0, 31.0, 33.0, 39.0, 41.0, 43.0, 57.0]
    DDY123_dict['eta12to14_eoo_withoutLCTFit_y'] =  [19.1, 16.32, 18.24, 13.940000000000001, 13.860000000000001, 15.44, 13.520000000000001, 13.5, 8.98, 12.56, 8.940000000000001, 5.58, 3.18, 3.9000000000000004, 5.38, 2.5800000000000005, 3.5800000000000005, 11.760000000000002, 0.9800000000000001]

    DDY123_dict['eta12to14_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 29.0, 31.0, 33.0, 39.0, 41.0, 43.0, 57.0]
    DDY123_dict['eta12to14_eoo_withLCTFit_y'] =  [19.1, 16.32, 18.24, 13.940000000000001, 13.860000000000001, 15.44, 13.520000000000001, 13.5, 8.98, 12.56, 8.940000000000001, 5.58, 3.18, 3.9000000000000004, 5.38, 2.5800000000000005, 3.5800000000000005, 11.760000000000002, 0.9800000000000001]



    DDY123_dict['eta14to16_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0, 45.0]
    DDY123_dict['eta14to16_eoo_withoutLCTFit_y'] =  [13.88, 14.5, 13.88, 16.04, 16.34, 13.0, 12.260000000000002, 15.200000000000001, 11.56, 11.260000000000002, 9.1, 3.8800000000000003, 7.74, 4.960000000000001, 3.3400000000000003, 1.96, 2.16, 0.18000000000000002, 1.58]

    DDY123_dict['eta14to16_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0, 45.0]
    DDY123_dict['eta14to16_eoo_withLCTFit_y'] =  [13.88, 14.5, 13.88, 16.04, 16.34, 13.0, 12.260000000000002, 15.200000000000001, 11.56, 11.260000000000002, 9.1, 3.8800000000000003, 7.74, 4.960000000000001, 3.3400000000000003, 1.96, 2.16, 0.18000000000000002, 1.58]





    DDY123_dict['eta16to18_eoo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 49.0]
    DDY123_dict['eta16to18_eoo_withoutLCTFit_y'] =  [19.8, 18.76, 18.66, 16.76, 12.3, 12.530000000000001, 13.58, 14.98, 13.280000000000001, 9.340000000000002, 12.620000000000001, 16.82, 8.64, 5.840000000000001, 11.260000000000002, 16.1, 9.56, 7.5, 18.34, 3.16, 1.18, 3.5600000000000005, 2.5600000000000005]



    DDY123_dict['eta16to18_eoo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 49.0]
    DDY123_dict['eta16to18_eoo_withLCTFit_y'] =  [19.8, 18.76, 18.66, 16.76, 12.3, 12.530000000000001, 13.58, 14.98, 13.280000000000001, 9.340000000000002, 12.620000000000001, 16.82, 8.64, 5.840000000000001, 11.260000000000002, 16.1, 9.56, 7.5, 18.34, 3.16, 1.18, 3.5600000000000005, 2.5600000000000005]



    DDY123_dict['eta18to20_eoo_withoutLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta18to20_eoo_withoutLCTFit_y'] =  [17.2, 13.290000000000001, 13.0, 12.740000000000004, 11.593333333333334, 13.06, 9.58, 12.860000000000001, 9.650000000000002, 6.660000000000001, 7.500000000000001, 9.83, 6.740000000000001, 6.940000000000001, 4.5600000000000005, 6.680000000000001, 8.6, 3.2800000000000002, 3.7, 4.880000000000001, 4.18, 4.760000000000001, 0.7800000000000001, 3.74]

    DDY123_dict['eta18to20_eoo_withLCTFit_x'] =  [3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 47.0, 49.0]
    DDY123_dict['eta18to20_eoo_withLCTFit_y'] =  [17.2, 13.290000000000001, 13.0, 12.740000000000004, 11.593333333333334, 13.06, 9.58, 12.860000000000001, 9.650000000000002, 6.660000000000001, 7.500000000000001, 9.83, 6.740000000000001, 6.940000000000001, 4.5600000000000005, 6.680000000000001, 8.6, 3.2800000000000002, 3.7, 4.880000000000001, 4.18, 4.760000000000001, 0.7800000000000001, 3.74]



    DDY123_dict['eta20to22_eoo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0, 57.0]
    DDY123_dict['eta20to22_eoo_withoutLCTFit_y'] =  [9.98, 17.24, 12.44, 10.780000000000001, 12.700000000000001, 11.58, 11.650000000000002, 9.48, 8.793333333333333, 6.78, 8.033333333333333, 8.3, 8.42, 6.6000000000000005, 6.74, 5.08, 1.5200000000000002, 6.4, 6.0600000000000005, 8.3, 1.5200000000000002, 2.5600000000000005, 2.3400000000000003, 0.5800000000000001, 0.9800000000000001]

    DDY123_dict['eta20to22_eoo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 37.0, 39.0, 41.0, 43.0, 45.0, 55.0, 57.0]
    DDY123_dict['eta20to22_eoo_withLCTFit_y'] =  [9.98, 17.24, 12.44, 10.780000000000001, 12.700000000000001, 11.58, 11.650000000000002, 9.48, 8.793333333333333, 6.78, 8.033333333333333, 8.3, 8.42, 6.6000000000000005, 6.74, 5.08, 1.5200000000000002, 6.4, 6.0600000000000005, 8.3, 1.5200000000000002, 2.5600000000000005, 2.3400000000000003, 0.5800000000000001, 0.9800000000000001]



    DDY123_dict['eta22to24_eoo_withoutLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0, 41.0, 43.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eoo_withoutLCTFit_y'] =  [19.8, 8.8, 9.97, 8.320000000000002, 9.700000000000003, 10.320000000000002, 9.82, 8.44, 9.8, 7.740000000000001, 6.16, 6.3500000000000005, 5.1000000000000005, 3.95, 6.800000000000001, 3.9200000000000004, 4.0, 1.9900000000000002, 6.760000000000001, 1.1600000000000001, 0.7600000000000001, 0.9600000000000001, 1.3600000000000003]

    DDY123_dict['eta22to24_eoo_withLCTFit_x'] =  [1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0, 21.0, 23.0, 25.0, 27.0, 29.0, 31.0, 33.0, 35.0, 39.0, 41.0, 43.0, 45.0, 47.0]
    DDY123_dict['eta22to24_eoo_withLCTFit_y'] =  [19.8, 8.8, 9.97, 8.320000000000002, 9.700000000000003, 10.320000000000002, 9.82, 8.44, 9.8, 7.740000000000001, 6.16, 6.3500000000000005, 5.1000000000000005, 3.95, 6.800000000000001, 3.9200000000000004, 4.0, 1.9900000000000002, 6.760000000000001, 1.1600000000000001, 0.7600000000000001, 0.9600000000000001, 1.3600000000000003]


    ## find the LUT corresponding to this particular case
    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'
    xvalues = DDY123_dict["eta" + eta + '_' + parity + fitString + '_x']
    yvalues = DDY123_dict["eta" + eta + '_' + parity + fitString + '_y']

    ## get the pT value using the DDY123 at 90%
    foundPtValue = 0
    #print "deltay123", DDY123
    #print "eta" + eta + '_' + parity + fitString + '_x'
    #print xvalues
    #print yvalues
    for pp,qq in zip(xvalues, yvalues):
        #print pp,qq
        if pp <5: continue
        if DDY123 >= qq:
            foundPtValue = pp
            #print "\tOK"
            break
    #print "fount pt!!!", foundPtValue
    return foundPtValue


def pt_from_DDY123_v2(DDY123, eta, parity, doFit):

    DDY123_dict = {}

    DDY123_dict['eta12to14_oee_withoutLCTFit'] = [ 29.1746598641 ,  3.21007841215 ]

    DDY123_dict['eta12to14_oee_withLCTFit'] = [ 28.0328525528 ,  3.21527832806 ]

    DDY123_dict['eta14to16_oee_withoutLCTFit'] = [ 75.0466362387 ,  -0.416368187161 ]

    DDY123_dict['eta14to16_oee_withLCTFit'] = [ 53.5394764498 ,  1.29698265948 ]

    DDY123_dict['eta16to18_oee_withoutLCTFit'] = [ 105.949473091 ,  -9.74590656355 ]

    DDY123_dict['eta16to18_oee_withLCTFit'] = [ 99.8805188544 ,  -9.27733347846 ]

    DDY123_dict['eta18to20_oee_withoutLCTFit'] = [ 74.7149782512 ,  -8.14146416899 ]

    DDY123_dict['eta18to20_oee_withLCTFit'] = [ 2950732.91231 ,  -1043127.6119 ]

    DDY123_dict['eta20to22_oee_withoutLCTFit'] = [ 247234.212508 ,  -108820.58973 ]

    DDY123_dict['eta20to22_oee_withLCTFit'] = [ 2636717.40523 ,  -1548563.67761 ]

    DDY123_dict['eta22to24_oee_withoutLCTFit'] = [ 52.5959792946 ,  -4.2988821128 ]

    DDY123_dict['eta22to24_oee_withLCTFit'] = [ 15.490596104 ,  -3.40545579427 ]

    DDY123_dict['eta12to14_ooo_withoutLCTFit'] = [ 75.9422412646 ,  -10.5235298851 ]

    DDY123_dict['eta12to14_ooo_withLCTFit'] = [ 29.2723196576 ,  0.898359876871 ]

    DDY123_dict['eta14to16_ooo_withoutLCTFit'] = [ 23.7600385511 ,  1.56383935145 ]

    DDY123_dict['eta14to16_ooo_withLCTFit'] = [ 23.2003732246 ,  1.18938962488 ]

    DDY123_dict['eta16to18_ooo_withoutLCTFit'] = [ 128.752946445 ,  -15.246418575 ]

    DDY123_dict['eta16to18_ooo_withLCTFit'] = [ 97.333172775 ,  -17.4054927738 ]

    DDY123_dict['eta18to20_ooo_withoutLCTFit'] = [ 1277.84195015 ,  -546.405219489 ]

    DDY123_dict['eta18to20_ooo_withLCTFit'] = [ 701639.968256 ,  -366480.666542 ]

    DDY123_dict['eta20to22_ooo_withoutLCTFit'] = [ 34.1421332913 ,  -2.32975068897 ]

    DDY123_dict['eta20to22_ooo_withLCTFit'] = [ 47.4854301454 ,  -10.1599138292 ]

    DDY123_dict['eta22to24_ooo_withoutLCTFit'] = [ 76.2948237563 ,  -17.1579686498 ]

    DDY123_dict['eta22to24_ooo_withLCTFit'] = [ 3905209.57611 ,  -2074738.36889 ]

    DDY123_dict['eta12to14_eee_withoutLCTFit'] = [ 62.7953308085 ,  0.559766040937 ]

    DDY123_dict['eta12to14_eee_withLCTFit'] = [ 46.138580523 ,  1.99654383362 ]

    DDY123_dict['eta14to16_eee_withoutLCTFit'] = [ 44.0679291943 ,  1.28571001039 ]

    DDY123_dict['eta14to16_eee_withLCTFit'] = [ 38.270397715 ,  1.84796184706 ]

    DDY123_dict['eta16to18_eee_withoutLCTFit'] = [ 72.3813362783 ,  -2.59037999073 ]

    DDY123_dict['eta16to18_eee_withLCTFit'] = [ 72.3813362783 ,  -2.59037999073 ]

    DDY123_dict['eta18to20_eee_withoutLCTFit'] = [ 72.9764118117 ,  -6.86581551453 ]

    DDY123_dict['eta18to20_eee_withLCTFit'] = [ 29.9767050806 ,  0.411973656122 ]

    DDY123_dict['eta20to22_eee_withoutLCTFit'] = [ 47.6961626762 ,  -5.08281090081 ]

    DDY123_dict['eta20to22_eee_withLCTFit'] = [ 47.6961626762 ,  -5.08281090081 ]

    DDY123_dict['eta22to24_eee_withoutLCTFit'] = [ 37.9678263807 ,  -5.37722364349 ]

    DDY123_dict['eta22to24_eee_withLCTFit'] = [ 21.6978266563 ,  -6.15349543736 ]

    DDY123_dict['eta12to14_eoo_withoutLCTFit'] = [ 30.2344766953 ,  1.59834301214 ]

    DDY123_dict['eta12to14_eoo_withLCTFit'] = [ 21.4840032122 ,  3.00165383029 ]

    DDY123_dict['eta14to16_eoo_withoutLCTFit'] = [ 29.4464445437 ,  2.95536171277 ]

    DDY123_dict['eta14to16_eoo_withLCTFit'] = [ 22.3551393097 ,  3.15080551614 ]

    DDY123_dict['eta16to18_eoo_withoutLCTFit'] = [ 152.291767071 ,  -19.746002458 ]

    DDY123_dict['eta16to18_eoo_withLCTFit'] = [ 54.728584646 ,  -5.22289694105 ]

    DDY123_dict['eta18to20_eoo_withoutLCTFit'] = [ 45.781458614 ,  -3.83083581869 ]

    DDY123_dict['eta18to20_eoo_withLCTFit'] = [ 31.10733865 ,  -5.40800001772 ]

    DDY123_dict['eta20to22_eoo_withoutLCTFit'] = [ 32.0328949638 ,  -4.05062264509 ]

    DDY123_dict['eta20to22_eoo_withLCTFit'] = [ 21.6854747814 ,  -4.00706938384 ]

    DDY123_dict['eta22to24_eoo_withoutLCTFit'] = [ 50.1562656797 ,  -11.7586485973 ]

    DDY123_dict['eta22to24_eoo_withLCTFit'] = [ 10.2787707399 ,  -2.73209394927 ]


    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'
    values = DDY123_dict["eta" + eta + '_' + parity + fitString]


    foundPtValue = (values[0] / DDY123) + values[1]
    return foundPtValue

#______________________________________________________________________________                                           
def get_pt_slice(pt):
    return 0
    
def get_eta_partition(eta):

  etaPartition = -1
  if   (abs(eta)>=1.2 and abs(eta)<1.4): etaPartition = 0
  elif (abs(eta)>=1.4 and abs(eta)<1.6): etaPartition = 1
  elif (abs(eta)>=1.6 and abs(eta)<1.8): etaPartition = 2
  elif (abs(eta)>=1.8 and abs(eta)<2.0): etaPartition = 3
  elif (abs(eta)>=2.0 and abs(eta)<2.2): etaPartition = 4
  elif (abs(eta)>=2.2 and abs(eta)<=2.4): etaPartition = 5
  return etaPartition
 

def get_eta_partition_GE11(eta):

  etaPartition = -1
  if   (abs(eta)>=1.6 and abs(eta)<1.8): etaPartition = 0
  elif (abs(eta)>=1.8 and abs(eta)<2.0): etaPartition = 1
  elif (abs(eta)>=2.0 and abs(eta)<2.2): etaPartition = 2
  return etaPartition

#______________________________________________________________________________                                           
def deltay12_deltay23(x1, y1, phi1,
                      x2, y2, phi2,
                      x3, y3, phi3):
  ## reference angle
  referenceAngle = phi2

  ## calculate the difference between the y' after the transformation
  ## this function needs more information August 16th 2016
  y1_prime = - x1 * sin(referenceAngle) + y1 * cos(referenceAngle) 
  y2_prime = - x2 * sin(referenceAngle) + y2 * cos(referenceAngle) 
  y3_prime = - x3 * sin(referenceAngle) + y3 * cos(referenceAngle) 
  
  deltay12 = y2_prime - y1_prime
  deltay23 = y3_prime - y2_prime
  return deltay12, deltay23


#______________________________________________________________________________                                           
def get_eta_from_Z_R(r, z):
    
    theta = TMath.Atan(z/r)
    returnValue = - TMath.Log(TMath.Abs(TMath.Tan(theta/2.)))
    return returnValue

#______________________________________________________________________________                                           
def get_parity(isEven1, isEven2, isEven3, isEven4):
  ## parity cases
  ## 0. odd even even
  ## 1. odd odd odd
  ## 2. even even even
  ## 3. even odd odd
  
  totalParity = -1
  if not isEven1 and     isEven2 and     isEven3: totalParity = 0
  if not isEven1 and not isEven2 and not isEven3: totalParity = 1
  if     isEven1 and     isEven2 and     isEven3: totalParity = 2
  if     isEven1 and not isEven2 and not isEven3: totalParity = 3
  return totalParity


def get_parity_ME11_ME21(isEven1, isEven2):
  ## parity cases
  ## 0. odd even
  ## 1. odd odd
  ## 2. even even
  ## 3. even odd
  
  totalParity = -1
  if not isEven1 and     isEven2: totalParity = 0
  if not isEven1 and not isEven2: totalParity = 1
  if     isEven1 and     isEven2: totalParity = 2
  if     isEven1 and not isEven2: totalParity = 3
  return totalParity

#______________________________________________________________________________                                               
## dictionary with:
## 1. proportionality factor
## 2. slope
## 3. intercept
## numbers derived by Jose Dimas Valle
dict_prop_slope_intercept = {
  0 : {
    0 : [1.279, 0.04784, 0.1122],
    1 : [1.279, 0.65424, 0.09761],
    2 : [0.648, 0.05527, 0.08944],
    3 : [0.648, 0.08295, 0.1279],
    4 : [0.648, 0.1660, 0.2158],
    5 : [0.648, 0.4952, 0.7103],
    },
  1 : {
    0 : [0.6357, 0.0827, 0.2021],
    1 : [0.6357, 0.0906, 0.1773],
    2 : [0.3542, 0.1067, 0.1957],
    3 : [0.3542, 0.1561, 0.2645],
    4 : [0.3542, 0.3156, 0.4514],
    5 : [0.3542, 0.8242, 1.0712],
    },
  2 : {
    0 : [1.001, 0.038, 0.008345],
    1 : [1.001, 0.04157, 0.0617],
    2 : [0.5636, 0.0562, 0.08417],
    3 : [0.5636, 0.0870, 0.1426],
    4 : [0.5636, 0.1676, 0.2198],
    5 : [0.5636, 0.4953, 0.7272],
    },
  3 : {
    0 : [0.5252, 0.0739, 0.1714],
    1 : [0.5252, 0.07838, 0.1307],
    2 : [0.3217, 0.1066, 0.2026],
    3 : [0.3217, 0.1435, 0.2118],
    4 : [0.3217, 0.2874, 0.4055],
    5 : [0.3217, 0.7625, 1.075],
    }
  }


## dictionary with:
## 0. odd even even
## 1. odd odd odd
## 2. even even even
## 3. even odd odd
## numbers derived by Sven Dildick August 2016
## 1. proportionality factor
## 2. slope
## 3. intercept
dict_prop_slope_intercept_DIGIL1 = {
  0 : {
    0 : [1.1, 0.04784, 0.1122],
    1 : [1.1, 0.65424, 0.09761],
    2 : [0.64, 0.05527, 0.08944],
    3 : [0.64, 0.08295, 0.1279],
    4 : [0.6, 0.1660, 0.2158],
    5 : [0.6, 0.4952, 0.7103],
    },
  1 : {
    0 : [0.58, 0.0827, 0.2021],
    1 : [0.58, 0.0906, 0.1773],
    2 : [0.3542, 0.1067, 0.1957],
    3 : [0.3542, 0.1561, 0.2645],
    4 : [0.3542, 0.3156, 0.4514],
    5 : [0.3542, 0.8242, 1.0712],
    },
  2 : {
    0 : [1.001, 0.038, 0.008345],
    1 : [1.001, 0.04157, 0.0617],
    2 : [0.5636, 0.0562, 0.08417],
    3 : [0.5636, 0.0870, 0.1426],
    4 : [0.5636, 0.1676, 0.2198],
    5 : [0.5636, 0.4953, 0.7272],
    },
  3 : {
    0 : [0.5252, 0.0739, 0.1714],
    1 : [0.5252, 0.07838, 0.1307],
    2 : [0.3217, 0.1066, 0.2026],
    3 : [0.3217, 0.1435, 0.2118],
    4 : [0.3217, 0.2874, 0.4055],
    5 : [0.3217, 0.7625, 1.075],
  }
}


#______________________________________________________________________________                       
#def get_proptionality_factor(etaPartition, parity):
#  return dict_prop_slope_intercept_DIGIL1[parity][etaPartition][0]


#______________________________________________________________________________               
def get_proptionality_factor(eta, parity, doFit):

    deltay12_deltay23_dict = {}
    deltay12_deltay23_dict['eta12to14_oee_withoutLCTFit'] =  1.24093338795

    deltay12_deltay23_dict['eta12to14_oee_withLCTFit'] =  1.24345925746

    deltay12_deltay23_dict['eta14to16_oee_withoutLCTFit'] =  0.985343125081

    deltay12_deltay23_dict['eta14to16_oee_withLCTFit'] =  0.996786931391

    deltay12_deltay23_dict['eta16to18_oee_withoutLCTFit'] =  0.649008222638

    deltay12_deltay23_dict['eta16to18_oee_withLCTFit'] =  0.612735069982

    deltay12_deltay23_dict['eta18to20_oee_withoutLCTFit'] =  0.693893747346

    deltay12_deltay23_dict['eta18to20_oee_withLCTFit'] =  0.646849268748

    deltay12_deltay23_dict['eta20to22_oee_withoutLCTFit'] =  0.653451986689

    deltay12_deltay23_dict['eta20to22_oee_withLCTFit'] =  0.648791133269

    deltay12_deltay23_dict['eta22to24_oee_withoutLCTFit'] =  0.39981815831

    deltay12_deltay23_dict['eta22to24_oee_withLCTFit'] =  0.65227592956

    deltay12_deltay23_dict['eta12to14_ooo_withoutLCTFit'] =  0.566279610466

    deltay12_deltay23_dict['eta12to14_ooo_withLCTFit'] =  0.595337665398

    deltay12_deltay23_dict['eta14to16_ooo_withoutLCTFit'] =  0.648109631647

    deltay12_deltay23_dict['eta14to16_ooo_withLCTFit'] =  0.641572722721

    deltay12_deltay23_dict['eta16to18_ooo_withoutLCTFit'] =  0.27801149125

    deltay12_deltay23_dict['eta16to18_ooo_withLCTFit'] =  0.367291740957

    deltay12_deltay23_dict['eta18to20_ooo_withoutLCTFit'] =  0.395440951724

    deltay12_deltay23_dict['eta18to20_ooo_withLCTFit'] =  0.339494032878

    deltay12_deltay23_dict['eta20to22_ooo_withoutLCTFit'] =  0.354853768589

    deltay12_deltay23_dict['eta20to22_ooo_withLCTFit'] =  0.435025594247

    deltay12_deltay23_dict['eta22to24_ooo_withoutLCTFit'] =  0.258801845574

    deltay12_deltay23_dict['eta22to24_ooo_withLCTFit'] =  0.371844515888

    deltay12_deltay23_dict['eta12to14_eee_withoutLCTFit'] =  0.874401225533

    deltay12_deltay23_dict['eta12to14_eee_withLCTFit'] =  0.873201636932

    deltay12_deltay23_dict['eta14to16_eee_withoutLCTFit'] =  0.954990074112

    deltay12_deltay23_dict['eta14to16_eee_withLCTFit'] =  0.974947072903

    deltay12_deltay23_dict['eta16to18_eee_withoutLCTFit'] =  0.577270453699

    deltay12_deltay23_dict['eta16to18_eee_withLCTFit'] =  0.475733733424

    deltay12_deltay23_dict['eta18to20_eee_withoutLCTFit'] =  0.501028888355

    deltay12_deltay23_dict['eta18to20_eee_withLCTFit'] =  0.517802457469

    deltay12_deltay23_dict['eta20to22_eee_withoutLCTFit'] =  0.625483882833

    deltay12_deltay23_dict['eta20to22_eee_withLCTFit'] =  0.605904784532

    deltay12_deltay23_dict['eta22to24_eee_withoutLCTFit'] =  0.486760894818

    deltay12_deltay23_dict['eta22to24_eee_withLCTFit'] =  0.580738182562

    deltay12_deltay23_dict['eta12to14_eoo_withoutLCTFit'] =  0.510408080937

    deltay12_deltay23_dict['eta12to14_eoo_withLCTFit'] =  0.550568509674

    deltay12_deltay23_dict['eta14to16_eoo_withoutLCTFit'] =  0.602579544015

    deltay12_deltay23_dict['eta14to16_eoo_withLCTFit'] =  0.556562043487

    deltay12_deltay23_dict['eta16to18_eoo_withoutLCTFit'] =  0.333701210218

    deltay12_deltay23_dict['eta16to18_eoo_withLCTFit'] =  0.289018479045

    deltay12_deltay23_dict['eta18to20_eoo_withoutLCTFit'] =  0.399145167582

    deltay12_deltay23_dict['eta18to20_eoo_withLCTFit'] =  0.282063177734

    deltay12_deltay23_dict['eta20to22_eoo_withoutLCTFit'] =  0.375677512107

    deltay12_deltay23_dict['eta20to22_eoo_withLCTFit'] =  0.285870689454

    deltay12_deltay23_dict['eta22to24_eoo_withoutLCTFit'] =  0.333978399307

    deltay12_deltay23_dict['eta22to24_eoo_withLCTFit'] =  0.334565983007

    ## find the LUT corresponding to this particular case
    if doFit:
        fitString = '_withLCTFit'
    else:
        fitString = '_withoutLCTFit'
       
    return deltay12_deltay23_dict["eta" + eta + '_' + parity + fitString]

#______________________________________________________________________________               
def pt_from_position(x1, y1, z1, phi1, isEven1,
                     x2, y2, z2, phi2, isEven2,
                     x3, y3, z3, phi3, isEven3,
                     x4, y4, z4, phi4, isEven4,
                     eta):

  etaPartition = get_eta_partition(eta)
  totalParity = get_parity(isEven1, isEven2, isEven3, isEven4)
  deltay12, deltay23 = deltay12_deltay23(x1, y1, phi1,
                                         x2, y2, phi2,
                                         x3, y3, phi3)
  ## debug
  debug = False
  if debug:
    print "etaPartition", etaPartition
    print "totalParity", totalParity
    print "deltay12", deltay12, "deltay23", deltay23
  

  if totalParity < 0 or totalParity > 3 or etaPartition == -1: return -99
  
  preResult1 = 1./abs(deltay23 - dict_prop_slope_intercept[totalParity][etaPartition][0] * deltay12)
  preResult2 = dict_prop_slope_intercept[totalParity][etaPartition][1]
  preResult3 = dict_prop_slope_intercept[totalParity][etaPartition][2]
  
  result = (preResult1 + preResult2) / preResult3
  return result


#______________________________________________________________________________                                                                                                  
def poly_library(st1, st2, pol):
  if pol == 'pol1':
    if st1==1 and st2==2: return [5.746, 1.787, 0, 0]
    if st1==1 and st2==3: return [-2.232, 1.316, 0, 0]
    if st1==1 and st2==4: return [2.902, 1.06, 0, 0]
    if st1==2 and st2==3: return [5.673, 1.509, 0, 0]
    if st1==2 and st2==4: return [-1.954, 1.387, 0, 0]
    if st1==3 and st2==4: return [9.49, 1.701, 0, 0]

  if pol == 'pol2':
    if st1==1 and st2==2: return [-5.242, 3.51, -0.05, 0]
    if st1==1 and st2==3: return [-4.949, 1.803, -0.01521, 0]
    if st1==1 and st2==4: return [-3.815, 1.25, -0.0059, 0]
    if st1==2 and st2==3: return [-5.676, 3.146, -0.04168, 0]
    if st1==2 and st2==4: return [-6.098, 2.019, -0.01753, 0]
    if st1==3 and st2==4: return [-5.73,  4.098, -0.06534, 0]

  if pol == 'pol3':
    if st1==1 and st2==2: return [-9.07, 4.337, -0.09737, 0.0007264]
    if st1==1 and st2==3: return [-3.847, 1.544, 0.0003261, -0.0002424]
    if st1==1 and st2==4: return [2.217, 0.8523, 0.01741, -0.0003688]
    if st1==2 and st2==3: return [-8.221, 3.66, -0.06812, 0.0003513]
    if st1==2 and st2==4: return [-7.146, 2.234, -0.02903, 0.0001623]
    if st1==3 and st2==4: return [-12.02, 4.979, -0.1118, 0.0006741]


#______________________________________________________________________________                                                                                                  
def poly_resolution_library(st1, st2, pol):
  if pol == 'pol1':
    if st1==1 and st2==2: return [ 0.232997504786 ,  0.017828278707 ,  0 ,  0 ]
    if st1==1 and st2==3: return [ 0.104940544565 ,  0.0106112367459 ,  0 ,  0 ]
    if st1==1 and st2==4: return [ 0.0925582264163 ,  0.00956934260453 ,  0 ,  0 ]
    if st1==2 and st2==3: return [ 0.216945979301 ,  0.016118034413 ,  0 ,  0 ]
    if st1==2 and st2==4: return [ 0.163140326149 ,  0.0135758108182 ,  0 ,  0 ]
    if st1==3 and st2==4: return [ 0.330823642594 ,  0.0231212343975 ,  0 ,  0 ]

  if pol == 'pol2':
    if st1==1 and st2==2: return [ 0.425399442245 ,  0.0586066270926 ,  0.00163445427321 ,  0 ]
    if st1==1 and st2==3: return [ 0.192621978027 ,  0.0308062180816 ,  0.000904397271426 ,  0 ]
    if st1==1 and st2==4: return [ 0.178716461728 ,  0.0277746891351 ,  0.000852731696197 ,  0 ]
    if st1==2 and st2==3: return [ 0.366360930694 ,  0.0455322268289 ,  0.00108424619265 ,  0 ]
    if st1==2 and st2==4: return [ 0.296314120328 ,  0.0400845995546 ,  0.00104606620245 ,  0 ]
    if st1==3 and st2==4: return [ 0.610542572048 ,  0.0758914148344 ,  0.00197003210269 ,  0 ]

  if pol == 'pol3':
    if st1==1 and st2==2: return [ 0.761866989134 ,  0.148505001684 ,  0.00791521266201 ,  0.000119935087897 ]
    if st1==1 and st2==3: return [ 0.349128668505 ,  0.0750168990651 ,  0.00420312018117 ,  6.40341791597e-05 ]
    if st1==1 and st2==4: return [ 0.329886125573 ,  0.0688219584793 ,  0.00399634981601 ,  6.39899740996e-05 ]
    if st1==2 and st2==3: return [ 0.695634434177 ,  0.127903932904 ,  0.00623745201508 ,  8.16246655536e-05 ]
    if st1==2 and st2==4: return [ 0.553850340289 ,  0.103963455628 ,  0.00524106684519 ,  7.24391536905e-05 ]
    if st1==3 and st2==4: return [ 1.10865695068 ,  0.196820380084 ,  0.00978414190039 ,  0.000138975821929 ]
    

#______________________________________________________________________________                                                                                                  
def getPtFromDphi(st1, st2, dphi1, dphi2, pol):
  if dphi1 != 99 and dphi2 != 99 and dphi1 != dphi2:
    values = poly_library(st1, st2, pol)
    abs_deltaPhi_inv = 1./abs(deltaPhi(dphi1, dphi2))
    values_corr = [values[3], values[2], values[1], values[0] - abs_deltaPhi_inv]
    
    roots = np.roots(values_corr)
    #print roots
    #p0_term = values[0]
    #p1_term = abs_deltaPhi_inv*values[1]
    #p2_term = abs_deltaPhi_inv*abs_deltaPhi_inv*values[2]
    #p3_term = abs_deltaPhi_inv*abs_deltaPhi_inv*abs_deltaPhi_inv*values[3]
    return 0#p0_term + p1_term + p2_term + p3_term
  else: 
    return 0
 

#______________________________________________________________________________                                                                                                  
def getPtErrorFromDphi(st1, st2, dphi1, dphi2, pol):
  if dphi1 != 99 and dphi2 != 99 and dphi1 != dphi2:
    values = poly_library(st1, st2, pol)
    abs_deltaPhi_inv = 1./abs(deltaPhi(dphi1, dphi2))

    p0_term = values[0]
    p1_term = abs_deltaPhi_inv*values[1]
    p2_term = abs_deltaPhi_inv*abs_deltaPhi_inv*values[2]
    p3_term = abs_deltaPhi_inv*abs_deltaPhi_inv*abs_deltaPhi_inv*values[3]
    return p0_term + p1_term + p2_term + p3_term
  else: 
    return 0


#______________________________________________________________________________                                                                                                  
def L1Mu_status(st1, st2, st3, st4):
  def ok(st):
    return st != 99
  def nok(st):
    return st==99

  ## should not happen!
  if nok(st1) and nok(st2) and nok(st3) and nok(st4): status = 0

  if ok(st1) and nok(st2) and nok(st3) and nok(st4):  status = 1
  if nok(st1) and ok(st2) and nok(st3) and nok(st4):  status = 2
  if nok(st1) and nok(st2) and ok(st3) and nok(st4):  status = 3
  if nok(st1) and nok(st2) and nok(st3) and ok(st4):  status = 4

  ## low quality
  if ok(st1) and ok(st2) and nok(st3) and nok(st4):  status = 5
  if ok(st1) and nok(st2) and ok(st3) and nok(st4):  status = 6
  if ok(st1) and nok(st2) and nok(st3) and ok(st4):  status = 7
  if nok(st1) and ok(st2) and ok(st3) and nok(st4):  status = 8
  if nok(st1) and ok(st2) and nok(st3) and ok(st4):  status = 9
  if nok(st1) and nok(st2) and ok(st3) and ok(st4):  status = 10

  ## high quality
  if nok(st1) and ok(st2) and ok(st3) and ok(st4):  status = 11
  if ok(st1) and nok(st2) and ok(st3) and ok(st4):  status = 12
  if ok(st1) and ok(st2) and nok(st3) and ok(st4):  status = 13
  if ok(st1) and ok(st2) and ok(st3) and nok(st4):  status = 14

  ## highest quality
  if ok(st1) and ok(st2) and ok(st3) and ok(st4):  status = 15

  return status

#______________________________________________________________________________                                                                                                  
def addfiles(ch, dirname=".", ext=".root"):
  theInputFiles = []
  if not os.path.isdir(dirname):
      print "ERROR: This is not a valid directory: ", dirname
      exit()
  ls = os.listdir(dirname)
  theInputFiles.extend([dirname[:] + x for x in ls if x.endswith(ext)])
  for pfile in theInputFiles:
      ## drop the /eos/uscms
      pfile_mod = 'root://cmseos.fnal.gov/' + pfile[10:]
      print pfile
      ch.Add(pfile_mod)

  return ch


#______________________________________________________________________________                                                                                                  
def deltaPhi(phi1, phi2):
  result = phi1 - phi2;
  while (result > 2*M_PI): 
    result -= 4*M_PI;
  while (result <= -2*M_PI):
    result += 4*M_PI;
  return result;


#______________________________________________________________________________                                                                                                  
def deltaPhi2(phi1, phi2):
  result = phi1 - phi2;
  while (result > M_PI): 
    result -= 2*M_PI;
  while (result <= -M_PI):
    result += 2*M_PI;
  return result;

#______________________________________________________________________________                       
def normalizedPhi(phi1):
  result = phi1;
  while (result > 2*M_PI): 
    result -= 4*M_PI;
  while (result <= -2*M_PI):
    result += 4*M_PI;
  return result;

#______________________________________________________________________________                       
def normalizedPhi2(phi1):
  result = phi1;
  while (result > M_PI): 
    result -= 2*M_PI;
  while (result <= -M_PI):
    result += 2*M_PI;
  return result;

#______________________________________________________________________________                                      
def getQuantilesX(hist2d):
  probs = array.array('d', [0.025, 0.16, 0.5, 1 - 0.16, 0.975] )
  q = array.array('d', [0.0]*len(probs))
  hist1d = hist2d.QuantilesX(len(probs), q, probs)
  SetOwnership( hist1d, True )
  return hist1d


#______________________________________________________________________________                                              
def getMedian(yintegral):
  if (yintegral%2 == 1):
    return (yintegral-1)/2 + 1
  else:
    return (yintegral/2) + 0.5
  

#______________________________________________________________________________                                                                                                  
def get1DHistogramMedianY(hist2d):
    '''this function returns a 1d histogram
    for a 2d histgram using the median and the x-sigma resolution on the median'''

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    ymin = hist2d.GetYaxis().GetXmin()
    ymax = hist2d.GetYaxis().GetXmax()
 
    xs = []
    ys = []
    xs_e_up = []
    xs_e_dw = []
    ys_e_up = []
    ys_e_dw = []

    r1 = TH1F("r1","",xBins,xmin,xmax)
    for x in range(1,xBins+1):
      #print "bin:", x
      probSum = array.array('d', [.32, .5, .68])
      q = array.array('d', [0.0]*len(probSum))
      entries = hist2d.Integral(x,x,0,yBins+1)
      ## do not compute quantiles for empty histograms!!!
      if entries == 0:
        continue
      tempHist = hist2d.ProjectionY("bin1",x,x)
      tempHist.GetQuantiles(len(probSum), q, probSum)
      #print "q", q

      xval = hist2d.GetBinCenter(x)
      xval_e_up = hist2d.GetBinWidth(x)/2.
      xval_e_dw = hist2d.GetBinWidth(x)/2.
      yval = q[1]
      yval_e_up = q[2] - yval
      yval_e_dw = yval - q[0]

      r1.SetBinContent(x, yval)
      error = (q[2]- q[0])/(2*sqrt(entries))
      r1.SetBinError(x, error)

      """
      xs.append(xval) 
      xs_e_up.append(xval_e_up)
      xs_e_dw.append(xval_e_dw)
      ys.append(yval)
      ys_e_up.append(yval_e_up)
      ys_e_dw.append(yval_e_dw)
      """

    """
    print "xval", xs
    print
    print "yval", ys
    print
    print "yval_e_up", ys_e_up
    print
    print "yval_e_dw", ys_e_dw
    """
    SetOwnership( r1, False )
    return r1
    """
    tgraph = TGraphAsymmErrors(len(xs), 
                               array.array("f",xs), 
                               array.array("f",ys), 
                               array.array("f",xs_e_dw), 
                               array.array("f",xs_e_up), 
                               array.array("f",ys_e_dw), 
                               array.array("f",ys_e_up))
    SetOwnership( tgraph, False )
    return tgraph
    """

#______________________________________________________________________________                                                                                                  
def get1DHistogramFractionY(hist2d, fraction=.9):
    '''this function returns 2 arrays, the x-values and the array with the  
    with the 90% fraction on the yaxis'''

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    ymin = hist2d.GetYaxis().GetXmin()
    ymax = hist2d.GetYaxis().GetXmax()
 
    xs = []
    ys = []
    xs_e_up = []
    xs_e_dw = []
    ys_e_up = []
    ys_e_dw = []


    r1 = TH1F("r1","",xBins,xmin,xmax)
    for x in range(1,xBins+1):
      #print "bin:", x
      probSum = array.array('d', [.90])
      q = array.array('d', [0.0]*len(probSum))
      entries = hist2d.Integral(x,x,0,yBins+1)
      ## do not compute quantiles for empty histograms!!!
      if entries == 0:
        continue
      tempHist = hist2d.ProjectionY("bin1",x,x)
      tempHist.GetQuantiles(len(probSum), q, probSum)
      #print "q", q

      xval = hist2d.GetBinCenter(x)
      xval_e_up = hist2d.GetBinWidth(x)/2.
      xval_e_dw = hist2d.GetBinWidth(x)/2.

      yval = q[0]
      yval_e_up = yval/sqrt(entries*fraction)
      yval_e_dw = yval/sqrt(entries*(1-fraction))

      r1.SetBinContent(x, yval)
      r1.SetBinError(x, max(yval_e_up, yval_e_dw))

      xs.append(xval) 
      xs_e_up.append(xval_e_up)
      xs_e_dw.append(xval_e_dw)
      ys.append(yval)
      ys_e_up.append(yval_e_up)
      ys_e_dw.append(yval_e_dw)

    SetOwnership( r1, False )
    return xs, ys, r1


#______________________________________________________________________________                                           
def FitHistoFunction(hist2d, fraction, printa=False): 

    xBins = hist2d.GetXaxis().GetNbins()
    yBins = hist2d.GetYaxis().GetNbins()
    xmin = hist2d.GetXaxis().GetXmin()
    xmax = hist2d.GetXaxis().GetXmax()
    ymin = hist2d.GetYaxis().GetXmin()
    ymax = hist2d.GetYaxis().GetXmax()

    fraction = fraction/100.0
    Xs = array.array('d')
    Ys = array.array('d')
    exl = array.array('d')
    eyl = array.array('d')
    exh = array.array('d')
    eyh = array.array('d')
    ybinwidth = (ymax-ymin)/(1.0*yBins) 
    xbinwidth = (xmax-xmin)/(1.0*yBins) 
    Totfreq = hist2d.Integral(0,xBins+1,0,yBins+1)
    if Totfreq < 10:
      return (0,0,0,0,0,0)
    print "Totfreq ",Totfreq
    for x in range(1, xBins+1):

        if (printa > 0):
            print "*********** For bin x: %d **********************"%x
            

        # Find the total number of frequencies
        totalfreq = hist2d.Integral(x,x,0,yBins+1)
        if totalfreq*1.0/(Totfreq*1.0)<0.0001:
          if printa>0:print "bin ",x," two small bincontent here "
          continue
        # calculate the expected integral  
        med = totalfreq*(1.0-fraction)

        temporal = 0
        midbin = 0
        content =0 
        for m in range (0,yBins+1):
                temporal = hist2d.Integral(x,x,0,m)
                if (temporal >= med):
                    midbin = m              # Break once I get to the median
                    if printa>0:print "total inegral at this bin ",totalfreq, " expected integral ", med," temporal ",temporal, " temporal bin ",midbin
                    break
                if midbin ==0: #median is out of y-range
                  if printa>0:print "median is out of y-range"
                  continue

        content = hist2d.GetBinContent(x,midbin)
        p=temporal*1.0/(totalfreq*1.0) 
        ledge = ymin+(midbin-1)*ybinwidth
        p1 = (temporal-content)*1.0/(totalfreq*1.0)
        if printa>0:print "temporal ",temporal," temporal/totalfreq ",p," (temporal-thisbincontent)/totalfreq ",p1," total ",totalfreq," thisbin content ",content," this bin ",midbin
        y = ledge+ybinwidth*(1-fraction-p1)/(p-p1)
        
        Xs.append(hist2d.GetBinCenter(x))
        Ys.append(y)
        exl.append(xbinwidth/2.0)
        exh.append(xbinwidth/2.0)
        eyl.append(y*1.0/math.sqrt(totalfreq*(1-fraction)))  
        eyh.append(y*1.0/math.sqrt(totalfreq*(fraction)))  
        if printa>0:print "x ",hist2d.GetBinCenter(x)," y ",y," exl ",xbinwidth/2.," exh ",xbinwidth/2," eyl ",math.sqrt(totalfreq*(1-fraction))," eyh ",math.sqrt(totalfreq*(fraction))

    return (Xs, Ys, exl, exh, eyl, eyh)                               #Return the histogram 1D 
                             #Return the histogram 1D 


#_______________________________________________________________________________
def applyTdrStyle():
    cmsText     = "CMS Phase II Simulation"
    cmsTextFont   = 61  ## default is helvetic-bold

    lumiTextSize     = 0.6
    lumiTextOffset   = 0.2
    cmsTextSize      = 0.75
    cmsTextOffset    = 0.1  ## only used in outOfFrame version
    
    relPosX    = 0.045
    relPosY    = 0.035
    relExtraDY = 1.2
    
    ## ratio of "CMS" and extra text size
    extraOverCmsTextSize  = 0.76

    lumi_14TeV = "PU = 0"

    """
    H = pad.GetWh();
    W = pad.GetWw();
    l = pad.GetLeftMargin();
    b = pad.GetBottomMargin();
    e = 0.025;
    """
    t = gPad.GetTopMargin();
    r = gPad.GetRightMargin();


    latex = TLatex()
    latex.SetNDC();
    latex.SetTextAngle(0);
    latex.SetTextColor(kBlack);    
    
    extraTextSize = extraOverCmsTextSize*cmsTextSize;
    """
    latex.SetTextFont(cmsTextFont);
    latex.SetTextSize(cmsTextSize*t);
    latex.SetTextFont(42);
    latex.SetTextAlign(31); 
    latex.SetTextSize(lumiTextSize*t);    
    latex.DrawLatex(1-r,1-t+lumiTextOffset*t,lumiText);    
    """

    """
    alignY_=3;
    alignX_=2;    
    align_ = 10*alignX_ + alignY_;
    latex.SetTextAlign(align_);
    posX_ = 1-r - relPosX*(1-l-r)
    posY_ = 1-t - relPosY*(1-t-b)
    """
    latex.DrawLatex(0.52, 0.87, cmsText);
    return latex


#______________________________________________________________________________
def addfiles(ch, dirname=".", ext=".root"):
  theInputFiles = []
  if not os.path.isdir(dirname):
    print "ERROR: This is not a valid directory: ", dirname
    exit()
  ls = os.listdir(dirname)
  theInputFiles.extend([dirname[:] + x for x in ls if x.endswith(ext)])
  for pfile in theInputFiles:
    ch.Add(pfile)  

  return ch

#______________________________________________________________________________
def firstSecondBin(h):
    h.SetBinContent(1,h.GetBinContent(0) + h.GetBinContent(1))
    h.SetBinContent(0,0)
    return h
#______________________________________________________________________________
def getBackwardCumulative(h):
    htemp = TH1F("htemp"," ",len(myptbin)-1, myptbin)
    ## keep the underflow
    htemp.SetBinContent(0,h.GetBinContent(0))
    for i in range(1,len(myptbin)+1):        
        sum = 0
        for j in range(i,len(myptbin)+1):
            sum += h.GetBinContent(j)
        htemp.SetBinContent(i, sum)
    htemp.Sumw2()
    SetOwnership(htemp, False)
    return htemp

#______________________________________________________________________________
def getRatecount(tree, todraw, cut):
    htemp = TH1F("htemp"," ",len(myptbin)-1, myptbin)
    tree.Draw(todraw+">>htemp",cut)
    return htemp.GetEntries()

#___________________________________________________
def getTotalEventNumber(tree):
    eventList = []
    for k in range(0,tree.GetEntries()):
        tree.GetEntry(k)
        eventList.append(tree.event)
    return len(set(eventList))

#______________________________________________________________________________
def scaleToRate(tree, h):
    ntotalEvents = tree.GetEntries()
    averageRate = 30000. #[kHz]
    bunchCrossingWindow = 1.
    h.Scale(averageRate/bunchCrossingWindow/ntotalEvents)
    return h

#______________________________________________________________________________
def getRatePtHistogram(tree, h):
    h = getBackwardCumulative(h)
    h = scaleToRate(tree, h)
    return h
        
#______________________________________________________________________________
def getRateEtaHistogram(tree, h):
    h = scaleToRate(tree, h)
    return h

#______________________________________________________________________________
def getRate(treecut):
   
    #f = ROOT.TFile(file)
    #t = f.Get(dir)
    h = TH1F("h"," ",len(myptbin)-1, myptbin)
    n=1
    for x in ptbin:
       #print "cut ",cut+" && pt>=%f"%x
       content = getRatecount(tree,"pt",cut+"&& pt>=%f"%x)
       #content = tree.GetEntries(cut+"&& pt>=%f"%x)
       print "bin n ",n,"pt ",x ,"  content ",content
       h.SetBinContent(n, content)
       n= n+1
    h.Sumw2()
    #print "before scale "
    #h.Print("all")
    ntotalEvents = getTotalEventNumber(tree)
    averageRate = 30000. #[kHz]
    bunchCrossingWindow = 1.
#    h.Scale(40000./ntotalEvents/3.*0.795)
    h.Scale(averageRate/bunchCrossingWindow/ntotalEvents)
    SetOwnership(h, False)
    return h

#______________________________________________________________________________
def set_style():
   gStyle.SetStatStyle(0)
   gStyle.SetOptStat(11111111)
   gStyle.SetTitleBorderSize(0);
   gStyle.SetPadLeftMargin(0.126);
   gStyle.SetPadRightMargin(0.04);
   gStyle.SetPadTopMargin(0.06);
   gStyle.SetPadBottomMargin(0.13);
   
#______________________________________________________________________________
def draw_1D(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
   gStyle.SetStatStyle(0)
   gStyle.SetOptStat(11111111)

   c = TCanvas("c","c",800,600)
   c.Clear()
   gStyle.SetTitleBorderSize(0);
   gStyle.SetPadLeftMargin(0.126);
   gStyle.SetPadRightMargin(0.04);
   gStyle.SetPadTopMargin(0.06);
   gStyle.SetPadBottomMargin(0.13);
   p.Draw(to_draw + ">>" + "h_name" + h_bins, cut)
   h = TH1F(gDirectory.Get("h_name").Clone("h_name"))
   if not h:
      sys.exit('h does not exist')
   h.SetTitle(title)
   h.SetLineWidth(2)
   h.SetLineColor(kBlue)
   h.GetXaxis().SetLabelSize(0.05)
   h.GetYaxis().SetLabelSize(0.05)
   h.GetXaxis().SetTitleSize(0.06)
   h.GetYaxis().SetTitleSize(0.06)
   header = "                                                         PU = 140, 14 TeV"
#   h.SetTitle(header)
   h.Draw()
   h.SetMinimum(0.)
   h.SetMaximum(h.GetMaximum()*1.2)
   c.SaveAs("" + c_title + ".png")
      

#______________________________________________________________________________
def draw_1D_root(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
   p.Draw(to_draw + ">>" + "h_name" + h_bins, cut)
   h = TH1F(gDirectory.Get("h_name").Clone("h_name"))
   if not h:
      sys.exit('h does not exist')
   h.SetTitle(title)
   h.SetLineWidth(2)
   h.SetLineColor(kBlue)
   h.GetXaxis().SetLabelSize(0.05)
   h.GetYaxis().SetLabelSize(0.05)
   h.GetXaxis().SetTitleSize(0.06)
   h.GetYaxis().SetTitleSize(0.06)
   h.Draw()
   h.SetMinimum(0.)
   h.SetMaximum(h.GetMaximum()*1.2)
   h.SaveAs("" + c_title + ".root")


#_______________________________________________________________________________
def draw_2D(p, to_draw, c_title, title, h_bins, cut="", opt = ""):
  gStyle.SetStatStyle(0)
  gStyle.SetOptStat(1110)
  c = TCanvas("c","c",800,600)
  c.Clear()
  gStyle.SetPadLeftMargin(0.126);
  gStyle.SetPadRightMargin(0.04);
  gStyle.SetPadTopMargin(0.06);
  gStyle.SetPadBottomMargin(0.13);
  p.Draw(to_draw + ">>h_" + h_bins, cut)
  h = TH2F(gDirectory.Get("h_"))
  if not h:
    sys.exit('h does not exist')
  h = TH2F(h.Clone("h_"))
  h.SetTitle(title)
  h.SetLineWidth(2)
  h.SetLineColor(kBlue)
  h.Draw(opt) 
  c.SaveAs("" + c_title + ".png")


#_______________________________________________________________________________
def applyTdrStyle():
    cmsText     = "CMS PhaseII Simulation"
    cmsTextFont   = 61  ## default is helvetic-bold

    lumiTextSize     = 0.6
    lumiTextOffset   = 0.2
    cmsTextSize      = 0.75
    cmsTextOffset    = 0.1  ## only used in outOfFrame version
    
    relPosX    = 0.045
    relPosY    = 0.035
    relExtraDY = 1.2
    
    ## ratio of "CMS" and extra text size
    extraOverCmsTextSize  = 0.76

    lumi_14TeV = "PU = 140"

    """
    H = pad.GetWh();
    W = pad.GetWw();
    l = pad.GetLeftMargin();
    b = pad.GetBottomMargin();
    e = 0.025;
    """
    t = gPad.GetTopMargin();
    r = gPad.GetRightMargin();
    latex = TLatex()
    latex.SetNDC();
    latex.SetTextAngle(0);
    latex.SetTextColor(kBlack);    
    
    extraTextSize = extraOverCmsTextSize*cmsTextSize;
    """
    latex.SetTextFont(cmsTextFont);
    latex.SetTextSize(cmsTextSize*t);
    latex.SetTextFont(42);
    latex.SetTextAlign(31); 
    latex.SetTextSize(lumiTextSize*t);    
    latex.DrawLatex(1-r,1-t+lumiTextOffset*t,lumiText);    
    """

    """
    alignY_=3;
    alignX_=2;    
    align_ = 10*alignX_ + alignY_;
    latex.SetTextAlign(align_);
    posX_ = 1-r - relPosX*(1-l-r)
    posY_ = 1-t - relPosY*(1-t-b)
    """
    latex.DrawLatex(0.52, 0.87, cmsText);
    return latex


#_______________________________________________________________________________
def getEffObject(p, variable, binning, denom_cut, extra_num_cut):

    denom = get_1D(p, "denom", "denom", binning, variable, denom_cut)
    num = get_1D(p, "num", "num", binning, variable, AND(denom_cut, extra_num_cut))
    print "denom", denom.GetEntries()
    print "num", num.GetEntries()
    h = TEfficiency(num, denom)
#    h = clearEmptyBinsEff(h)
    SetOwnership(h, False)
    return h

#_______________________________________________________________________________
def makeEtaEffPlot(h, plotTitle, legTitle):
    c = TCanvas("c","c",800,600)
    c.Clear()
    gStyle.SetTitleStyle(0);
    gStyle.SetTitleAlign(13); ##coord in top left
    gStyle.SetTitleX(0.);
    gStyle.SetTitleY(1.);
    gStyle.SetTitleW(1);
    gStyle.SetTitleH(0.058);
    #gStyle.SetTitleXOffset(0.05)
    gStyle.SetTitleBorderSize(0);
    gStyle.SetPadLeftMargin(0.126);
    gStyle.SetPadRightMargin(0.04);
    gStyle.SetPadTopMargin(0.06);
    gStyle.SetPadBottomMargin(0.13);
    gStyle.SetOptStat(0);
    gStyle.SetMarkerStyle(1);
    gPad.SetTickx(1)
    gPad.SetTicky(1)
    #gStyle.SetStatStyle(0)
    base = TH1D("base","base", 25, 0, 2.5)
    base.SetStats(0)
    base.SetTitle("                                                                      14 TeV,  PU = 140; #eta; Efficiency")
    base.SetMinimum(0)
    base.SetMaximum(1.1)
    base.GetXaxis().SetLabelSize(0.05)
    base.GetYaxis().SetLabelSize(0.05)
    base.GetXaxis().SetTitleSize(0.06)
    base.GetYaxis().SetTitleSize(0.06)
    #base.GetXaxis().SetLimits(0,maxbin)
    base.Draw()
    h.SetMarkerColor(kBlue)
    h.SetLineColor(kBlue)
    h.SetLineWidth(2)
    h.SetMarkerStyle(1)
    h.SetMarkerSize(15)
    h.Draw("same")
    leg = TLegend(0.1,0.3,0.75,0.45,"","brNDC")
    leg.SetFillColor(kWhite)
    leg.SetBorderSize(0)
    leg.SetFillStyle(0)
    leg.SetTextSize(0.04)
    leg.AddEntry(h,legTitle,"l")
    leg.Draw("same")
    #tex = drawLabel(p.ctau + ", " + p.mass,0.45,0.55,0.05)
    #tex4 = drawLabel(p.mass,0.55,0.47,0.05)
    #tex3 = drawLabel("H #rightarrow 2n_{1} #rightarrow 2n_{D}2Z_{D} #rightarrow 2n_{D}4#mu",0.45,0.65,0.05)
    tex2 = applyTdrStyle()
    c.SaveAs(plotTitle + ".png")


#_______________________________________________________________________________
def makeSimplePlot(targetDir, h, plotTitle, setLogx=False):
    c = TCanvas("c","c",800,600)
    c.Clear()
    gStyle.SetTitleStyle(0);
    gStyle.SetTitleAlign(13); ##coord in top left
    gStyle.SetTitleX(0.);
    gStyle.SetTitleY(0.);
    gStyle.SetTitleW(1);
    gStyle.SetTitleH(0.058);
    #gStyle.SetTitleXOffset(0.05)
    gStyle.SetTitleBorderSize(0);
    gStyle.SetPadLeftMargin(0.126);
    gStyle.SetPadRightMargin(0.04);
    gStyle.SetPadTopMargin(0.06);
    gStyle.SetPadBottomMargin(0.13);
    gStyle.SetOptStat(0);
    gStyle.SetMarkerStyle(1);
    gPad.SetTickx(1)
    gPad.SetTicky(1)
    if setLogx:
        gPad.SetLogx()
    #gStyle.SetStatStyle(0)
    gStyle.SetOptStat(11111111)
    h.SetStats(1)
    h.GetXaxis().SetLabelSize(0.05)
    h.GetYaxis().SetLabelSize(0.05)
    h.GetXaxis().SetTitleSize(0.06)
    h.GetYaxis().SetTitleSize(0.06)
    #h.GetXaxis().SetLimits(0,maxbin)
    h.Draw()
    h.SetMarkerColor(kBlue)
    h.SetLineColor(kBlue)
    h.SetLineWidth(2)
    h.SetMarkerStyle(1)
    h.SetMarkerSize(15)
    #tex = drawLabel(p.ctau + ", " + p.mass,0.45,0.55,0.05)
    #tex4 = drawLabel(p.mass,0.55,0.47,0.05)
    #tex3 = drawLabel("H #rightarrow 2n_{1} #rightarrow 2n_{D}2Z_{D} #rightarrow 2n_{D}4#mu",0.45,0.65,0.05)
    tex2 = applyTdrStyle()
    c.SaveAs(targetDir + plotTitle + ".png")


#_______________________________________________________________________________
def get_1D(p, title, h_name, h_bins, to_draw, cut, opt = "", color = kBlue):
    gStyle.SetStatStyle(0)
    gStyle.SetOptStat(11111111)
    #nbins = len(xbins)
    #h = TH1F("h_name", "h_name", nbins, xbins);
    p.Draw(to_draw + ">>" + h_name + h_bins, cut)
    h = TH1F(gDirectory.Get(h_name).Clone(h_name))
    if not h:
        sys.exit('%s does not exist'%(to_draw))
    h.SetTitle(title)
    h.SetLineWidth(2)
    h.SetLineColor(color)    
    h.SetMinimum(0.)
    SetOwnership(h, False)
    return h

#_______________________________________________________________________________
def to_array(x, fmt="d"):
    return array.array(fmt, x)
