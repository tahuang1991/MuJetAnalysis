#!/bin/sh

# put STDERR to STDOUT 
exec 2>&1

echo "This script was generated by crab (version 2.11.1_patch1)."
#
# HEAD
#
#
echo "Running $0 with $# positional parameters: $*"

getRandSeed() {
     den=(0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z)
    nd=${#den[*]}
    randj=${den[$RANDOM % $nd]}${den[$RANDOM % $nd]}${den[$RANDOM % $nd]}
    echo $randj
}

dumpStatus() {
    echo ">>> info for dashboard:"
    echo "***** Cat $1 *****"
    cat $1
    echo "***** End Cat jobreport *****"
    chmod a+x $RUNTIME_AREA/report.py

    $RUNTIME_AREA/report.py $(cat $1)
    rm -f $1
    echo "MonitorJobID=`echo $MonitorJobID`" > $1
    echo "MonitorID=`echo $MonitorID`" >> $1
}

amIanOverflowJob() {
# check if this is a job which glideinWMS scheduled to a site not among the submission list
OverflowFlag=0
echo \$_CONDOR_JOB_AD =${_CONDOR_JOB_AD}
if [ "X$_CONDOR_JOB_AD" != "X" ]; then
    DESIRED_Sites=`grep '^DESIRED_Sites =' $_CONDOR_JOB_AD | tr -d '"' | awk '{print $NF;}'|tr ',' ' '`
    JOB_CMSSite=`grep '^JOB_CMSSite =' $_CONDOR_JOB_AD | tr -d '"' | awk '{print $NF;}'`
    OverflowFlag=1
    for site in $DESIRED_Sites; do
      if [ "$site" = "$JOB_CMSSite" ]; then
	  OverflowFlag=0
      fi
    done
fi
}


### REMOVE THE WORKING_DIR IN OSG SITES ###
remove_working_dir() {
    cd $RUNTIME_AREA
    echo ">>> working dir = $WORKING_DIR"
    echo ">>> current directory (RUNTIME_AREA): $RUNTIME_AREA"
    echo ">>> Remove working directory: $WORKING_DIR"
    /bin/rm -rf $WORKING_DIR
    if [ -d $WORKING_DIR ] ;then
        echo "ERROR ==> OSG $WORKING_DIR could not be deleted on WN `hostname`"
        job_exit_code=10017
    fi
}

### DUMP ORIGINAL ENVIRONMENT BEFORE CMSSW CUSTOMIZATIOn
dumpEnv(){
echo export PATH=$PATH >> CacheEnv.sh
echo export LD_LIBRARY_PATH=$LD_LIBRARY_PATH >> CacheEnv.sh
echo export PYTHONPATH=$PYTHONPATH >> CacheEnv.sh
}

outOfBound()
{
echo "********** CRAB WRAPPER CMSSW.sh TERMINATED BY A KILL"
if  [ ! -f ${RUNTIME_AREA}/WATCHDOG-SAYS-EXCEEDED-RESOURCE ]
then
  echo "********** KILL WAS NOT ISSUED BY CRAB WATCHDOG. SET GENERIC EXIT CODE"
  job_exit_code=50669
else
  echo "********** KILL signal was issued by Crab Watchdog"
  exceededResource=`cat  ${RUNTIME_AREA}/WATCHDOG-SAYS-EXCEEDED-RESOURCE`
  echo "********** because usage of resource ${exceededResource} was excessive"
  case ${exceededResource} in 
    "RSS"        ) job_exit_code=50660 ;;
    "VSIZE"      ) job_exit_code=50661 ;;
    "DISK"       ) job_exit_code=50662 ;;
    "CPU TIME"   ) job_exit_code=50663 ;;
    "WALL TIME"  ) job_exit_code=50664 ;;
    * ) echo "watchdog kill reason not given, set generic exit code"; job_exit_code=50669 ;;
  esac
  echo "************** JOB EXIT CODE set to: ${job_exit_code}"
fi
func_exit
}

exitBySignal()
{
echo "********** ${externalSignal} detected at `date`  -  `date -u`"
outOfBound
}

detectSIGINT()
{
externalSignal='SIGINT'; exitBySignal
}
detectSIGUSR1()
{
externalSignal='SIGUSR1'; exitBySignal
}
detectSIGUSR2()
{
externalSignal='SIGUSR2'; exitBySignal
}
detectSIGXCPU()
{
externalSignal='SIGXCPU'; exitBySignal
}
detectSIGXFSZ()
{
externalSignal='SIGXFSZ'; exitBySignal
}
detectSIGTERM()
{
externalSignal='SIGTERM'; exitBySignal
}


func_exit(){
    echo "CrabWrapper EXIT_FUNC entered at `date`   -  `date -u`"
    if [ -f ${RUNTIME_AREA}/WATCHDOG-SAYS-EXCEEDED-RESOURCE ]; then
       echo "*** Watchdog kicked in, make sure we"
       echo "*** do not go on before Watchdog completes the cleanup"
       wait ${WatchdogPID}
    fi
    if [ ! -s $RUNTIME_AREA/fillCrabFjr.py ]; then 
        echo "WARNING: it is not possible to create crab_fjr.xml to final report" 
    else 
        python $RUNTIME_AREA/fillCrabFjr.py $RUNTIME_AREA/crab_fjr_$NJob.xml --errorcode $job_exit_code $executable_exit_status 
    fi
    cd $RUNTIME_AREA  
    echo "Showing Watchdog log file in current dir (RUNTIME_AREA= $RUNTIME_AREA)"
    du -sh Watchdog* 
    echo "Appending Watchdog log with date"
    date >> Watchdog_${NJob}.log 
    echo "Checking output files:  "
    for file in $filesToCheck ; do
        if [ -e $file ]; then
            echo "will tar file $file in  $out_files"
        else
            echo "WARNING: output file $file not found!"
        fi
    done
    if [ $middleware == OSG ]; then
        if [ $WORKING_DIR ]; then
            remove_working_dir
        fi
        symlinks -d .
    fi
    TIME_WRAP_END=`date +%s`
    let "TIME_WRAP = TIME_WRAP_END - TIME_WRAP_INI" 

    let "MIN_JOB_DURATION = 60*0" 
    let "PADDING_DURATION = MIN_JOB_DURATION - TIME_WRAP" 
    if [ $PADDING_DURATION -gt 0 ]; then 
        echo ">>> padding time: Sleeping the wrapper for $PADDING_DURATION seconds"
        sleep $PADDING_DURATION
        TIME_WRAP_END=`date +%s`
        let "TIME_WRAP = TIME_WRAP_END - TIME_WRAP_INI" 
    else 
        echo ">>> padding time: Wrapper lasting more than $MIN_JOB_DURATION seconds. No sleep required."
    fi

    echo "STOPPING WATCHDOG. CrabWatchdog PID is ${WatchdogPID}"
    kill $WatchdogPID
    echo "********** LAST 50 LINES OF WATCHDOG LOG"
    tail -50 Watchdog_$NJob.log
    echo "********** WATCHDOG LOG ENDED"
    echo "ZIPPING WATCHDOG LOG"
    gzip Watchdog_$NJob.log
    echo "Gzip in current dir `pwd`: `du -sh Watchdog*`" 
    if [ ! -s $RUNTIME_AREA/fillCrabFjr.py ]; then 
        echo "WARNING: it is not possible to create crab_fjr.xml to final report" 
    else 
        set -- $CPU_INFOS 
        echo "CrabUserCpuTime=$1" >>  $RUNTIME_AREA/$repo 
        echo "CrabSysCpuTime=$2" >>  $RUNTIME_AREA/$repo 
        echo "CrabCpuPercentage=$3" >>  $RUNTIME_AREA/$repo 
        python $RUNTIME_AREA/fillCrabFjr.py $RUNTIME_AREA/crab_fjr_$NJob.xml --timing $TIME_WRAP $TIME_EXE $TIME_STAGEOUT \"$CPU_INFOS\" 
        echo "CrabWrapperTime=$TIME_WRAP" >> $RUNTIME_AREA/$repo 
        if [ $TIME_STAGEOUT -lt 0 ]; then 
            export TIME_STAGEOUT=NULL 
        fi
        echo "CrabStageoutTime=$TIME_STAGEOUT" >> $RUNTIME_AREA/$repo 
    fi
    echo "Disk space used:"
    echo "du -sh $RUNTIME_AREA"
    du -sh $RUNTIME_AREA 

    final_list=$filesToCheck
#Check for stdout/err in new location as of condor 7.7
    stdo=`ls -l /proc/$$/fd/1|awk '{print $NF}'`
    stde=`ls -l /proc/$$/fd/2|awk '{print $NF}'`
    echo "JMM:: showing /proc/$$/fd/1 (and 2): "
    echo $$ 
    ls -l /proc/$$/fd/1 
    ls -l /proc/$$/fd/2 
    echo "Showing all contents in /proc/$$/fd: "
    ls -l /proc/$$/fd 
    if  ! [ `basename $stdo` ==  CMSSW_${NJob}.stdout ]; then
      echo "Found unusual stdout, rename for OSB"
      cp -pfv $stdo CMSSW_${NJob}.stdout
    fi
    if  ! [ `basename $stde` ==  CMSSW_${NJob}.stderr ]; then
      echo "Found unusual stderr, rename for OSB"
      cp -pfv $stde CMSSW_${NJob}.stderr
    fi
        echo "JOB_EXIT_STATUS = $job_exit_code"
    echo "JobExitCode=$job_exit_code" >> $RUNTIME_AREA/$repo
    dumpStatus $RUNTIME_AREA/$repo
    echo "EXITING at `date`  -  `date -u`"
    echo "Showing stdout or stderr files in current location:"
    ls -l *.std*
    echo "Showing all stuff with size in current location(`pwd`):"
    du -sh * 
    if [ $middleware == OSG ]; then
        echo "OSG=TRUE. Showing all stuff with size in upper dir:"
        du -sh ../* 
        if [ -e ../CMSSW_${NJob}.stdout ]; then
            echo "Showing all stuff with size in upper dir:"
            du -sh ../* 
            echo "Copying std files here" 
        fi 
        if [ -e ../CMSSW_${NJob}.stdout ]; then
          cp ../_condor_stdout CMSSW_${NJob}.stdout
          cp ../_condor_stderr CMSSW_${NJob}.stderr
        fi
    else 
      echo "SLURM (OSG false)" 
     fi 
    echo "Showing final list sizes in current dir: "
    du -sh ${final_list} 
    echo " "
    echo "Tarring files in final list:"
    echo ${final_list}
    tar zcvf ${out_files}.tgz crab_fjr* 
    echo "Showing finalized list of files (including tarball):"
    du -sh * 
    if [ $middleware == OSG ]; then
      if [ -e ../CMSSW_${NJob}.stdout ]; then
          echo "Copying to upper dir, because it is actual _condor_scratch dir:"
          chmod 755 ${final_list} *.tgz 
          cp -pfv *std* ../.
          cp -pfv *.tgz ../.
          cp -pfv Watchdog* ../.
          cp -pfv crab_fjr* ../.
          chmod 755 ../*gz 
          echo "....CondorDone"
      fi 
    else 
      echo "....SLURMDone"
    fi 
    sleep 15 
    echo "....Done."

tar zcvf ${out_files}.tgz ${filesToCheck}
exit $job_exit_code
}


RUNTIME_AREA=`pwd`
export RUNTIME_AREA

echo "Today is `date` - `date -u`"
echo "Job submitted on host `hostname`"
uname -a
lsb_release -id
echo ">>> current directory (RUNTIME_AREA): `pwd`"
#echo ">>> current directory content:"
#ls -Al
echo ">>> current user: `id`"
chmod 0700 -R .
echo ">>> directory permission set to 0700"
# proxy file needs special setting
proxyFile=`voms-proxy-info -path`
chmod 0600 ${proxyFile}

umask 077
echo ">>> umask set to: " `umask -S`

chmod 0704 /proc/$$/fd/1
chmod 0704 /proc/$$/fd/2
echo ">>> stdout stderr permission set to 0704"

echo ">>> voms proxy information:"
voms-proxy-info -all

repo=jobreport.txt
echo "WNHostName=`hostname`" | tee -a $RUNTIME_AREA/$repo

amIanOverflowJob
echo "OverflowFlag=${OverflowFlag}" | tee -a  $RUNTIME_AREA/$repo


#Written by cms_cmssw::wsUntarSoftware
echo ">>> tar --no-same-permissions -xf $RUNTIME_AREA/default.tgz :" 
tar --no-same-permissions -xf $RUNTIME_AREA/default.tgz
untar_status=$? 
echo "----------------" 
ls -AlR $RUNTIME_AREA 
echo "----------------" 
if [ $untar_status -ne 0 ]; then 
   echo "ERROR ==> Untarring .tgz file failed"
   job_exit_code=$untar_status
   func_exit
else 
   echo "Successful untar" 
fi 

echo ">>> Include $RUNTIME_AREA in PYTHONPATH:"
if [ -z "$PYTHONPATH" ]; then
   export PYTHONPATH=$RUNTIME_AREA/
else
   export PYTHONPATH=$RUNTIME_AREA/:${PYTHONPATH}
echo "PYTHONPATH=$PYTHONPATH"
fi


#
# SETUP ENVIRONMENT
#

export TIME_WRAP_INI=`date +%s` 
export TIME_STAGEOUT=-2 

# slurm specific stuff
# strip arguments
echo "strip arguments"
args=("$@")
nargs=$#
shift $nargs
# job number (first parameter for job wrapper)
NJob=${args[0]}; export NJob
NResub=${args[1]}; export NResub
NRand=`getRandSeed`; export NRand
OutUniqueID=_$NRand
OutUniqueID=_$NResub$OutUniqueID
OutUniqueID=$NJob$OutUniqueID; export OutUniqueID
out_files=out_files_${NJob}; export out_files
echo $out_files
echo ">>> list of expected files on output sandbox"
echo "output files: crab_fjr_$NJob.xml CMSSW_$NJob.stdout CMSSW_$NJob.stderr Watchdog_$NJob.log.gz"
filesToCheck="crab_fjr_$NJob.xml CMSSW_$NJob.stdout CMSSW_$NJob.stderr Watchdog_$NJob.log.gz"
export filesToCheck
SyncGridJobId=`echo https://slurm:/${SLURM_JOBID}-taohuang-Ptassignment-30-Nov-ct0-71nay2`
MonitorJobID=`echo ${NJob}_${SyncGridJobId}`
MonitorID=`echo taohuang_Ptassignment_30_Nov_ct0_71nay2`
echo "MonitorJobID=`echo $MonitorJobID`" | tee -a $RUNTIME_AREA/$repo 
echo "SyncGridJobId=`echo $SyncGridJobId`" | tee -a $RUNTIME_AREA/$repo 
echo "MonitorID=`echo $MonitorID`" | tee -a $RUNTIME_AREA/$repo
echo "SyncCE=slurm.`hostname -d`" | tee -a $RUNTIME_AREA/$repo 
middleware=SLURM 
dumpStatus $RUNTIME_AREA/$repo 
InputSandBox=${args[3]}



dumpEnv


#Written by cms_cmssw::wsSetupEnvironment
echo ">>> setup environment"
echo "set SCRAM ARCH to slc6_amd64_gcc491"
export SCRAM_ARCH=slc6_amd64_gcc491
echo "SCRAM_ARCH = $SCRAM_ARCH"
if [ $middleware == LCG ] || [ $middleware == CAF ] || [ $middleware == LSF ]; then 

#Written by cms_cmssw::wsSetupCMSLCGEnvironment_
    echo ">>> setup CMS LCG environment:"
    echo "set SCRAM ARCH and BUILD_ARCH to slc6_amd64_gcc491 ###"
    export SCRAM_ARCH=slc6_amd64_gcc491
    export BUILD_ARCH=slc6_amd64_gcc491
    if [ ! $VO_CMS_SW_DIR ] ;then
        echo "ERROR ==> CMS software dir not found on WN `hostname`"
        job_exit_code=10031
        func_exit
    else
        echo "Sourcing environment... "
        if [ ! -s $VO_CMS_SW_DIR/cmsset_default.sh ] ;then
            echo "ERROR ==> cmsset_default.sh file not found into dir $VO_CMS_SW_DIR"
            job_exit_code=10020
            func_exit
        fi
        echo "sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
        source $VO_CMS_SW_DIR/cmsset_default.sh
        result=$?
        if [ $result -ne 0 ]; then
            echo "ERROR ==> problem sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
            job_exit_code=10032
            func_exit
        fi
    fi
    
    echo "==> setup cms environment ok"
elif [ $middleware == OSG ]; then
    WORKING_DIR=`/bin/mktemp  -d $OSG_WN_TMP/cms_XXXXXXXXXXXX`
    if [ ! $? == 0 ] ;then
        echo "ERROR ==> OSG $WORKING_DIR could not be created on WN `hostname`"
        job_exit_code=10016
        func_exit
    fi
    echo ">>> Created working directory: $WORKING_DIR"

    echo "Change to working directory: $WORKING_DIR"
    cd $WORKING_DIR
    echo ">>> current directory (WORKING_DIR): $WORKING_DIR"

#Written by cms_cmssw::wsSetupCMSOSGEnvironment_
    echo ">>> setup CMS OSG environment:"
    echo "set SCRAM ARCH to slc6_amd64_gcc491"
    export SCRAM_ARCH=slc6_amd64_gcc491
    echo "SCRAM_ARCH = $SCRAM_ARCH"
    echo "OSG_APP is $OSG_APP"
    if [ -f $OSG_APP/cmssoft/cms/cmsset_default.sh ] ;then
        cmsSetupFile=$OSG_APP/cmssoft/cms/cmsset_default.sh
    elif [ -f $CVMFS/cms.cern.ch/cmsset_default.sh ] ; then 
        cmsSetupFile=$CVMFS/cms.cern.ch/cmsset_default.sh
    elif [ -f /cvmfs/cms.cern.ch/cmsset_default.sh ] ; then 
        cmsSetupFile=/cvmfs/cms.cern.ch/cmsset_default.sh
    else
        echo "CVMSF = $CVMFS"
        echo "/cvmfs/ is"
        echo "ls /"
        ls /
        echo "ls /cvmfs"
        ls /cvmfs
        echo "ls /cvmfs/cms.cern.ch"
        ls /cvmfs/cms.cern.ch
        ls /cvmfs/cms.cern.ch/cmsset*
        ls /cvmfs/cms.cern.ch/cmsset_default.sh
        echo "ERROR ==> cmsset_default.sh file not found"
        job_exit_code=10020
        func_exit
    fi

    echo "sourcing $cmsSetupFile ..."
    source $cmsSetupFile
    result=$?
    if [ $result -ne 0 ]; then
       echo "ERROR ==> problem sourcing $cmsSetupFile"
       job_exit_code=10032
       func_exit
    else
      echo "==> setup cms environment ok"
      echo "SCRAM_ARCH = $SCRAM_ARCH"
    fi
elif [ $middleware == SGE ]; then

#Written by cms_cmssw::wsSetupCMSLCGEnvironment_
    echo ">>> setup CMS LCG environment:"
    echo "set SCRAM ARCH and BUILD_ARCH to slc6_amd64_gcc491 ###"
    export SCRAM_ARCH=slc6_amd64_gcc491
    export BUILD_ARCH=slc6_amd64_gcc491
    if [ ! $VO_CMS_SW_DIR ] ;then
        echo "ERROR ==> CMS software dir not found on WN `hostname`"
        job_exit_code=10031
        func_exit
    else
        echo "Sourcing environment... "
        if [ ! -s $VO_CMS_SW_DIR/cmsset_default.sh ] ;then
            echo "ERROR ==> cmsset_default.sh file not found into dir $VO_CMS_SW_DIR"
            job_exit_code=10020
            func_exit
        fi
        echo "sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
        source $VO_CMS_SW_DIR/cmsset_default.sh
        result=$?
        if [ $result -ne 0 ]; then
            echo "ERROR ==> problem sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
            job_exit_code=10032
            func_exit
        fi
    fi
    
    echo "==> setup cms environment ok"
elif [ $middleware == ARC ]; then

#Written by cms_cmssw::wsSetupCMSLCGEnvironment_
    echo ">>> setup CMS LCG environment:"
    echo "set SCRAM ARCH and BUILD_ARCH to slc6_amd64_gcc491 ###"
    export SCRAM_ARCH=slc6_amd64_gcc491
    export BUILD_ARCH=slc6_amd64_gcc491
    if [ ! $VO_CMS_SW_DIR ] ;then
        echo "ERROR ==> CMS software dir not found on WN `hostname`"
        job_exit_code=10031
        func_exit
    else
        echo "Sourcing environment... "
        if [ ! -s $VO_CMS_SW_DIR/cmsset_default.sh ] ;then
            echo "ERROR ==> cmsset_default.sh file not found into dir $VO_CMS_SW_DIR"
            job_exit_code=10020
            func_exit
        fi
        echo "sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
        source $VO_CMS_SW_DIR/cmsset_default.sh
        result=$?
        if [ $result -ne 0 ]; then
            echo "ERROR ==> problem sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
            job_exit_code=10032
            func_exit
        fi
    fi
    
    echo "==> setup cms environment ok"
elif [ $middleware == PBS ] || [ $middleware == PBSV2 ] || [ $middleware == SLURM ]; then

#Written by cms_cmssw::wsSetupCMSLCGEnvironment_
    echo ">>> setup CMS LCG environment:"
    echo "set SCRAM ARCH and BUILD_ARCH to slc6_amd64_gcc491 ###"
    export SCRAM_ARCH=slc6_amd64_gcc491
    export BUILD_ARCH=slc6_amd64_gcc491
    if [ ! $VO_CMS_SW_DIR ] ;then
        echo "ERROR ==> CMS software dir not found on WN `hostname`"
        job_exit_code=10031
        func_exit
    else
        echo "Sourcing environment... "
        if [ ! -s $VO_CMS_SW_DIR/cmsset_default.sh ] ;then
            echo "ERROR ==> cmsset_default.sh file not found into dir $VO_CMS_SW_DIR"
            job_exit_code=10020
            func_exit
        fi
        echo "sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
        source $VO_CMS_SW_DIR/cmsset_default.sh
        result=$?
        if [ $result -ne 0 ]; then
            echo "ERROR ==> problem sourcing $VO_CMS_SW_DIR/cmsset_default.sh"
            job_exit_code=10032
            func_exit
        fi
    fi
    
    echo "==> setup cms environment ok"
fi


echo ">>> specific cmssw setup environment:"
echo "CMSSW_VERSION =  CMSSW_7_4_4"
scram project CMSSW CMSSW_7_4_4
status=$?
if [ $status != 0 ] ; then
    echo "ERROR ==> CMSSW CMSSW_7_4_4 not found on `hostname`" 
    job_exit_code=10034
    func_exit
fi 
cd CMSSW_7_4_4
SOFTWARE_DIR=`pwd`; export SOFTWARE_DIR
echo ">>> current directory (SOFTWARE_DIR): $SOFTWARE_DIR" 
eval `scram runtime -sh | grep -v SCRAMRT_LSB_JOBNAME`
if [ $? != 0 ] ; then
    echo "ERROR ==> Problem with the command: "
    echo "eval \`scram runtime -sh | grep -v SCRAMRT_LSB_JOBNAME \` at `hostname`"
    job_exit_code=10034
    func_exit
fi 

## number of arguments (first argument always jobnumber, the second is the resubmission number)

if [ $nargs -lt 2 ]
then
    echo 'ERROR ==> Too few arguments' +$nargs+ 
    job_exit_code=50113
    func_exit
fi


DatasetPath=/DarkSUSY_mH_125_mGammaD_20000_ctau0_14TeV_madgraph452_bridge224_LHE_pythia8_GEN_SIM_80k_v3/jrdv009-DarkSUSY_mH_125_mGammaD_20000_ctau0_14TeV_madgraph452_bridge224_LHE_pythia8_GEN_SIM_80k_v3-e007db91b5aa2bed7c0fc47ce82a4274/USER
PrimaryDataset=DarkSUSY_mH_125_mGammaD_20000_ctau0_14TeV_madgraph452_bridge224_LHE_pythia8_GEN_SIM_80k_v3
DataTier=jrdv009-DarkSUSY_mH_125_mGammaD_20000_ctau0_14TeV_madgraph452_bridge224_LHE_pythia8_GEN_SIM_80k_v3-e007db91b5aa2bed7c0fc47ce82a4274
ApplicationFamily=cmsRun

cp  $RUNTIME_AREA/CMSSW.py .
cp  $RUNTIME_AREA/CMSSW.py.pkl .
PreserveSeeds=; export PreserveSeeds
IncrementSeeds=; export IncrementSeeds
echo "PreserveSeeds: <$PreserveSeeds>"
echo "IncrementSeeds:<$IncrementSeeds>"
mv -f CMSSW.py pset.py

dumpStatus $RUNTIME_AREA/$repo

#
# END OF SETUP ENVIRONMENT
#

#
# fork watchdog
#
${RUNTIME_AREA}/crabWatchdog.sh &
export WatchdogPID=$!
echo "crabWatchdog started as process $WatchdogPID"
trap detectSIGINT  SIGINT
trap detectSIGUSR1 SIGUSR1
trap detectSIGUSR2 SIGUSR2
trap detectSIGXCPU SIGXCPU
trap detectSIGXFSZ SIGXFSZ
trap detectSIGTERM SIGTERM

#
# PREPARE AND RUN EXECUTABLE
#


#Written by cms_cmssw::wsBuildExe
echo ">>> moving CMSSW software directories in `pwd`" 
rm -rf lib/ module/ 
mv $RUNTIME_AREA/lib/ . 
mv $RUNTIME_AREA/module/ . 
echo ">>> Include $RUNTIME_AREA in PYTHONPATH:"
if [ -z "$PYTHONPATH" ]; then
   export PYTHONPATH=$RUNTIME_AREA/
else
   export PYTHONPATH=$RUNTIME_AREA/:${PYTHONPATH}
echo "PYTHONPATH=$PYTHONPATH"
fi


echo "***** cat pset.py *********"
cat pset.py
echo "****** end pset.py ********"

echo "***********************" 
which edmConfigHash 
echo "***********************" 
edmConfigHash pset.py 
PSETHASH=`edmConfigHash pset.py` 
echo "PSETHASH = $PSETHASH" 
if [ -z "$PSETHASH" ]; then 
   export PSETHASH=null
fi 

executable=cmsRun


#
# END OF PREPARE AND RUN EXECUTABLE
#

#
# COPY INPUT
#


#
# Rewrite cfg or cfgpy file
#

# Rewrite cfg for this job
echo  $RUNTIME_AREA/writeCfg.py --debug pset.py pset.py
python $RUNTIME_AREA/writeCfg.py --debug pset.py pset.py

        result=$?
        if [ $result -ne 0 ]; then
            echo "ERROR ==> problem re-writing config file"
            job_exit_code=10040
            func_exit
        fi

          
cat $RUNTIME_AREA/inputsReport.txt  

echo ">>> Executable $executable"
which $executable
res=$?
if [ $res -ne 0 ];then
  echo "ERROR ==> executable not found on WN `hostname`"
  job_exit_code=10035
  func_exit
else
  echo "ok executable found"
fi

echo "ExeStart=$executable" >>  $RUNTIME_AREA/$repo
dumpStatus $RUNTIME_AREA/$repo

echo ">>> $executable started at `date -u`"
start_exe_time=`date +%s`
CPU_INFOS=0 
/usr/bin/time -f "%U %S %P" -o cpu_timing.txt $executable  -j $RUNTIME_AREA/crab_fjr_$NJob.xml -p pset.py > executable.out 2>&1 
executable_exit_status=$?
CPU_INFOS=`tail -n 1 cpu_timing.txt`
stop_exe_time=`date +%s`
echo ">>> $executable ended at `date -u`"

chmod 0704 $RUNTIME_AREA/crab_fjr_*.xml
echo ">>> crab_fjr_*.xml  permission set to 0704"


#### dashboard add timestamp!
echo "ExeEnd=$executable" >> $RUNTIME_AREA/$repo
dumpStatus $RUNTIME_AREA/$repo

let "TIME_EXE = stop_exe_time - start_exe_time"
echo "TIME_EXE = $TIME_EXE sec"
echo "ExeTime=$TIME_EXE" >> $RUNTIME_AREA/$repo

#
# limit executable stdout size to 2K lines
#
exeOutLines=`wc -l executable.out | awk '{print $1'}`
echo ">>> $executable wrote $exeOutLines lines of stdout+stderr"
echo ">>> START OF printout of $exeOutLines lines from stdout+stderr"
if [ $exeOutLines -gt 4000 ]
then
  echo ">>> print out only first 1000 and last 3000 lines:"
  head -1000 executable.out; echo ""; echo ">>>[...BIG SNIP...]";echo "";tail -3000 executable.out
else
  cat executable.out
fi
echo ">>> END OF printout of $exeOutLines lines from stdout+stderr"

grep -q 'Fatal Exception' executable.out
fatal=$?
if [ ${fatal} == "0" ]
then
    echo ">>> ERROR: Fatal Exception from CMSSW:"
    awk '/Begin .* Exception/ { printing =1 } /End .* Exception/ { print $0; printing = 0 } printing { print $0 } ' executable.out 
fi

egrep -i 'segmentation.*fault|segmentation.*violation|segfault' executable.out
segFault=$?
if [ ${segFault} == "0" ]
then
  echo "ERROR ==> user executable segfaulted"
  job_exit_code=50800
  func_exit
fi

#
# if Watchdog killed executable, make sure we
# do not go on before Watchdog completes the cleanup
#
if [ -f ${RUNTIME_AREA}/WATCHDOG-SAYS-EXCEEDED-RESOURCE ]; then wait ${WatchdogPID}; fi


#Written by cms_cmssw::wsParseFJR
echo ">>> Parse FrameworkJobReport crab_fjr.xml"
if [ -s $RUNTIME_AREA/crab_fjr_$NJob.xml ]; then
    if [ -s $RUNTIME_AREA/parseCrabFjr.py ]; then
        cmd_out=`python $RUNTIME_AREA/parseCrabFjr.py --input $RUNTIME_AREA/crab_fjr_$NJob.xml --dashboard $MonitorID,$MonitorJobID --debug`
        echo "Result of parsing the FrameworkJobReport crab_fjr.xml: $cmd_out"
        cmd_out_1=`python $RUNTIME_AREA/parseCrabFjr.py --input $RUNTIME_AREA/crab_fjr_$NJob.xml --popularity $MonitorID,$MonitorJobID,$RUNTIME_AREA/inputsReport.txt --debug`
        echo "Result of parsing the FrameworkJobReport crab_fjr.xml: $cmd_out_1"
        executable_exit_status=`python $RUNTIME_AREA/parseCrabFjr.py --input $RUNTIME_AREA/crab_fjr_$NJob.xml --exitcode`
        if [ $executable_exit_status -eq 50115 ];then
            echo ">>> crab_fjr.xml contents: "
            cat $RUNTIME_AREA/crab_fjr_$NJob.xml
            echo "Wrong FrameworkJobReport --> does not contain useful info. ExitStatus: $executable_exit_status"
        elif [ $executable_exit_status -eq -999 ];then
            echo "ExitStatus from FrameworkJobReport not available. not available. Using exit code of executable from command line."
        else
            echo "Extracted ExitStatus from FrameworkJobReport parsing output: $executable_exit_status"
        fi
    else
        echo "CRAB python script to parse CRAB FrameworkJobReport crab_fjr.xml is not available, using exit code of executable from command line."
    fi
    if [ $executable_exit_status -eq 0 ];then
        echo ">>> Executable succeded  $executable_exit_status"
    fi
else
    echo "CRAB FrameworkJobReport crab_fjr.xml is not available, using exit code of executable from command line."
fi

if [ $executable_exit_status -ne 0 ];then
    echo ">>> Executable failed  $executable_exit_status"
    echo "ExeExitCode=$executable_exit_status" | tee -a $RUNTIME_AREA/$repo
    echo "EXECUTABLE_EXIT_STATUS = $executable_exit_status"
    job_exit_code=$executable_exit_status
    func_exit
fi

echo "ExeExitCode=$executable_exit_status" | tee -a $RUNTIME_AREA/$repo
echo "EXECUTABLE_EXIT_STATUS = $executable_exit_status"
job_exit_code=$executable_exit_status

#
# PROCESS THE PRODUCED RESULTS
#



#Written by cms_cmssw::wsRenameOutput
echo ">>> current directory $PWD" 
echo ">>>  (SOFTWARE_DIR): $SOFTWARE_DIR" 
echo ">>> (WORKING_DIR): $WORKING_DIR" 
echo ">>> current directory content:"
ls -Al


# check output file
if [ -e ./out_ana.root ] ; then
    mv out_ana.root out_ana_$OutUniqueID.root
    ln -s `pwd`/out_ana_$OutUniqueID.root $RUNTIME_AREA/out_ana.root
else
    job_exit_code=60302
    echo "WARNING: Output file out_ana.root not found"
fi
file_list="$SOFTWARE_DIR/out_ana_$OutUniqueID.root"

echo ">>> current directory $PWD" 
echo ">>> (SOFTWARE_DIR): $SOFTWARE_DIR" 
echo ">>> (WORKING_DIR): $WORKING_DIR" 
echo ">>> current directory content:"
ls -Al

cd $RUNTIME_AREA
echo ">>> current directory (RUNTIME_AREA):  $RUNTIME_AREA"


#
# COPY OUTPUT FILE TO /srm/v2/server?SFN=/fdata/hepx/store/user/taohuang/Ptassignment_30_Nov_ct0/
#

export PNN=T3_US_TAMU
echo "PNN = $PNN"
export SE=srm.brazos.tamu.edu
echo "SE = $SE"
export SE_PATH=/srm/v2/server?SFN=/fdata/hepx/store/user/taohuang/Ptassignment_30_Nov_ct0/
echo "SE_PATH = $SE_PATH"
export LFNBaseName=/store/user/taohuang/Ptassignment_30_Nov_ct0/
echo "LFNBaseName = $LFNBaseName"
export USER=taohuang
echo "USER = $USER"
export endpoint=srm://srm.brazos.tamu.edu:8443/srm/v2/server?SFN=/fdata/hepx/store/user/taohuang/Ptassignment_30_Nov_ct0/
echo "endpoint = $endpoint"
echo ">>> Copy output files from WN = `hostname` to $SE_PATH :"
export TIME_STAGEOUT_INI=`date +%s` 
copy_exit_status=0
echo "python cmscp.py  --destination $endpoint --inputFileList $file_list --middleware $middleware --PNN $PNN --se_name $SE --for_lfn $LFNBaseName  --debug  "
python cmscp.py  --destination $endpoint --inputFileList $file_list --middleware $middleware --PNN $PNN --se_name $SE --for_lfn $LFNBaseName  --debug  
echo "########### details of SE interaction"
if [ -f .SEinteraction.log ] ;then
    cat .SEinteraction.log
else
    echo ".SEinteraction.log file not found"
fi
echo "#####################################"
if [ -f $RUNTIME_AREA/resultCopyFile ] ;then
    cat $RUNTIME_AREA/resultCopyFile
    pwd
else
    echo "ERROR ==> $RUNTIME_AREA/resultCopyFile file not found. Problem during the stageout"
    echo "RUNTIME_AREA content: "
    ls $RUNTIME_AREA 
    job_exit_code=60318
    func_exit 
fi
if [ -f ${RUNTIME_AREA}/cmscpReport.sh ] ;then
    echo "-------- cat ${RUNTIME_AREA}/cmscpReport.sh "
    cat ${RUNTIME_AREA}/cmscpReport.sh
    echo "-------- end of ${RUNTIME_AREA}/cmscpReport.sh "
    source ${RUNTIME_AREA}/cmscpReport.sh
    source_result=$? 
    if [ $source_result -ne 0 ]; then
        echo "problem with the source of cmscpReport.sh file"
        StageOutExitStatus=60307
    fi
else
    echo "cmscpReport.sh file not found"
    StageOutExitStatus=60307
fi
if [ $StageOutExitStatus -ne 0 ]; then
    echo "Problem copying file to $SE $SE_PATH"
    copy_exit_status=$StageOutExitStatus 
    job_exit_code=$StageOutExitStatus
fi
export TIME_STAGEOUT_END=`date +%s` 
let "TIME_STAGEOUT = TIME_STAGEOUT_END - TIME_STAGEOUT_INI" 

echo ">>> current dir: `pwd`"
echo ">>> current dir content:"
ls -Al


#Written by cms_cmssw::wsModifyReport
echo ">>> Modify Job Report:" 
chmod a+x $RUNTIME_AREA/ProdCommon/FwkJobRep/ModifyJobReport.py
echo "CMSSW_VERSION = $CMSSW_VERSION"

echo "$RUNTIME_AREA/ProdCommon/FwkJobRep/ModifyJobReport.py fjr $RUNTIME_AREA/crab_fjr_$NJob.xml json $RUNTIME_AREA/resultCopyFile n_job $OutUniqueID PrimaryDataset $PrimaryDataset  ApplicationFamily $ApplicationFamily ApplicationName $executable cmssw_version $CMSSW_VERSION psethash $PSETHASH"
$RUNTIME_AREA/ProdCommon/FwkJobRep/ModifyJobReport.py fjr $RUNTIME_AREA/crab_fjr_$NJob.xml json $RUNTIME_AREA/resultCopyFile n_job $OutUniqueID PrimaryDataset $PrimaryDataset  ApplicationFamily $ApplicationFamily ApplicationName $executable cmssw_version $CMSSW_VERSION psethash $PSETHASH
modifyReport_result=$?
if [ $modifyReport_result -ne 0 ]; then
    modifyReport_result=70500
    job_exit_code=$modifyReport_result
    echo "ModifyReportResult=$modifyReport_result" | tee -a $RUNTIME_AREA/$repo
    echo "WARNING: Problem with ModifyJobReport"
else
    mv NewFrameworkJobReport.xml $RUNTIME_AREA/crab_fjr_$NJob.xml
fi

chmod 0704 $RUNTIME_AREA/crab_fjr_*.xml
echo ">>> crab_fjr_*.xml  permission set to 0704"

#
# END OF PROCESS THE PRODUCED RESULTS
#


func_exit
